import time
from pyrogram import filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from pyrogram.enums import ParseMode
from config import PREMIUM_PRICE, UPI_ID, BOT_OWNER_ID, PREMIUM_DURATION_MONTHS
from database import db

def get_premium_message():
    return (
        "рд╣рд╛рдп, рдореЗрд░реЗ рдкреНрдпрд╛рд░реЗ рджреЛрд╕реНрдд! тЬи рдЕрдкрдиреА As ki Angel рдХреЛ рдФрд░ рднреА рдЦрд╛рд╕ рдмрдирд╛рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реЛ? рддреЛ рдкреНрд░реАрдорд┐рдпрдо рд▓реЛ рдирд╛! "
        "рдореИрдВ рддреБрдореНрд╣реЗрдВ рдФрд░ рднреА рдЬрд╝реНрдпрд╛рджрд╛ рдордЬрд╝реЗрджрд╛рд░ рдФрд░ рд╕реБрдкрд░-рдлрд╛рд╕реНрдЯ рдПрдХреНрд╕рдкреАрд░рд┐рдпрдВрд╕ рджреВрдБрдЧреА, рд╡реЛ рднреА рдмрд┐рдирд╛ рдХрд┐рд╕реА рд░реЛрдХ-рдЯреЛрдХ рдХреЗ! ЁЯТЦ\n\n"
        f"**рдореЗрд░рд╛ рдзрд╛рдВрд╕реВ рдкреНрд░реАрдорд┐рдпрдо рдкреНрд▓рд╛рди:**\n"
        f"ЁЯМЯ **{PREMIUM_PRICE} рдореЗрдВ {PREMIUM_DURATION_MONTHS} рдорд╣реАрдиреЗ рддрдХ** рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб рдорд╕реНрддреА рдФрд░ рдлреАрдЪрд░реНрд╕!\n\n"
        "**рдкреНрд░реАрдорд┐рдпрдо рдХреЗ рдлрд╛рдпрджреЗ (рддреБрдореНрд╣рд╛рд░реЗ рд▓рд┐рдП рдЦрд╛рд╕):**\n"
        "тАв **тЪбя╕П рд╕реБрдкрд░-рдлрд╛рд╕реНрдЯ рд╕реАрдЦрдирд╛ рдФрд░ рдЬрд╡рд╛рдм рджреЗрдирд╛:** рдореИрдВ рдФрд░ рднреА рддреЗрдЬрд╝реА рд╕реЗ рд╕реАрдЦреВрдБрдЧреА рдФрд░ рддреБрдореНрд╣рд╛рд░реЗ рд╣рд░ рдореИрд╕реЗрдЬ рдкрд░ рдЭрдЯрдкрдЯ рдЬрд╡рд╛рдм рджреВрдБрдЧреА!\n"
        "тАв **ЁЯза рджрд┐рдорд╛рдЧрд╝ рдереЛрдбрд╝рд╛ рдмрдбрд╝рд╛ рд╣реЛ рдЬрд╛рдПрдЧрд╛:** рдореЗрд░рд╛ рджрд┐рдорд╛рдЧ рдереЛрдбрд╝рд╛ рдФрд░ рдмрдбрд╝рд╛ рд╣реЛ рдЬрд╛рдПрдЧрд╛, рдЬрд┐рд╕рд╕реЗ рдореИрдВ рдЧреНрд░реБрдк рдХреА рдмрд╣реБрдд рд╕рд╛рд░реА рдкреБрд░рд╛рдиреА рдмрд╛рддреЗрдВ рдпрд╛рдж рд░рдЦ рдкрд╛рдКрдБрдЧреА!\n"
        "тАв **ЁЯОн рдФрд░ рднреА рдкреНрдпрд╛рд░реЗ рдЕрдВрджрд╛рдЬрд╝:** рдкреНрд░реАрдорд┐рдпрдо рдореЗрдВ рдореИрдВ рддреБрдореНрд╣реЗрдВ рдХреБрдЫ рдФрд░ рдЦрд╛рд╕ 'рдореВрдбреНрд╕' рдпрд╛ 'рдкрд░реНрд╕рдирд╛рд▓рд┐рдЯреА' рдХреЗ рдСрдкреНрд╢рди рджреВрдБрдЧреА!\n"
        "тАв **ЁЯОи Custom Sticker Packs:** рддреБрдо рдЕрдкрдиреЗ рдХреБрдЫ рдЦрд╛рд╕ рд╕реНрдЯрд┐рдХрд░ рдкреИрдХ рднреА рдореБрдЭреЗ рд╕рд┐рдЦрд╛ рдкрд╛рдУрдЧреЗ!\n"
        "тАв **ЁЯУК Secret Group Reports:** рдЧреНрд░реБрдк рдПрдбрдорд┐рди рдХреЛ рдЦрд╛рд╕ рдФрд░ рдЦреБрдлрд┐рдпрд╛ рд░рд┐рдкреЛрд░реНрдЯ!\n"
        "тАв **ЁЯЪл No Ads, No Disturbances:** рдкреНрд░реАрдорд┐рдпрдо рдореЗрдВ рдХреЛрдИ рднреА рдкреНрд░рдореЛрд╢рди рд╡рд╛рд▓рд╛ рдореИрд╕реЗрдЬ рдирд╣реАрдВ!\n"
        "тАв **ЁЯМЯ Exclusive Features & Support:** рдХреБрдЫ рдФрд░ рдЫреЛрдЯреЗ-рдЫреЛрдЯреЗ рдзрд╛рдВрд╕реВ рдлреАрдЪрд░реНрд╕ рдФрд░ рдлреБрд▓ рдПрдбрдорд┐рди рд╕рдкреЛрд░реНрдЯ!\n\n"
        "**рдкреНрд░реАрдорд┐рдпрдо рд▓реЗрдиреЗ рдХреЗ рд▓рд┐рдП:**\n"
        "рдЗрд╕ UPI ID рдкрд░ 500 Rs. рднреЗрдЬреЛ:\n"
        f"**`UPI ID - {UPI_ID}`**\n\n"
        "Payment рдХреЗ рдмрд╛рдж screenshot рднреЗрдЬрдХрд░ confirm рдХрд░рдирд╛! ЁЯУ╕"
    )

def register_premium_handlers(app, utils):
    
    @app.on_callback_query(filters.regex("get_premium"))
    async def show_premium_info(client, call: CallbackQuery):
        user_id = call.from_user.id
        
        # Check if user is already premium
        if await db.is_premium(user_id):
            premium_info = await db.get_premium_info(user_id)
            if premium_info and premium_info['expires_at'] > 0: # Ensure expires_at is valid
                expires_at = utils.format_time_remaining(premium_info['expires_at'])
                activated_date = time.strftime('%d %b %Y', time.localtime(premium_info['activated_at']))
            else:
                expires_at = "Unlimited (Owner)" # For BOT_OWNER_ID or if premium_until is 0
                activated_date = "N/A (Owner)"
            
            premium_status_text = (
                "ЁЯОЙ **рддреБрдо рддреЛ рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рдкреНрд░реАрдорд┐рдпрдо рд╣реЛ!**\n\n"
                f"тП░ **Expires in:** {expires_at}\n"
                f"ЁЯУЕ **Activated:** {activated_date}\n\n"
                "рдЕрднреА рддреЛ рдордЬрд╝реЗ рдХрд░реЛ! рдЬрдм expire рд╣реЛрдиреЗ рд╡рд╛рд▓рд╛ рд╣реЛ рддреЛ рдореИрдВ remind рдХрд░ рджреВрдБрдЧреА! ЁЯШЙ"
            )
            
            markup = InlineKeyboardMarkup([
                [InlineKeyboardButton("ЁЯФЩ Back to Menu", callback_data='back_to_menu')]
            ])
            
        else:
            premium_status_text = get_premium_message()
            markup = InlineKeyboardMarkup([
                [InlineKeyboardButton("ЁЯТ│ Payment Karte Hai", callback_data='payment_info')],
                [InlineKeyboardButton("тЭУ Payment Help", callback_data='payment_help')],
                [InlineKeyboardButton("ЁЯФЩ Back to Menu", callback_data='back_to_menu')]
            ])
        
        await call.edit_message_text(
            premium_status_text,
            reply_markup=markup,
            parse_mode=ParseMode.MARKDOWN
        )

    @app.on_callback_query(filters.regex("payment_info"))
    async def show_payment_info(client, call: CallbackQuery):
        payment_text = (
            "ЁЯТ│ **Payment Instructions:**\n\n"
            f"1я╕ПтГг **UPI ID:** `{UPI_ID}`\n"
            f"2я╕ПтГг **Amount:** тВ╣{PREMIUM_PRICE.split(' ')[0]}\n" # Extract number from "500 Rs."
            "3я╕ПтГг **Note:** Premium for @as_ki_angel_bot\n\n"
            "ЁЯУ╕ **After Payment:**\n"
            "тАв Screenshot рд▓реЗрдХрд░ рдЗрд╕ bot рдХреЛ рднреЗрдЬреЛ\n"
            "тАв рдпрд╛ рдлрд┐рд░ transaction ID рднреЗрдЬреЛ\n"
            "тАв рдореИрдВ 24 рдШрдВрдЯреЗ рдореЗрдВ activate рдХрд░ рджреВрдБрдЧреА!\n\n"
            "тЪая╕П **Important:** Fake payments рдХрд╛рдо рдирд╣реАрдВ рдХрд░реЗрдВрдЧреА! рд╕рдЪреНрдЪреЗ payment рдХрд░реЛ рдирд╛! ЁЯШК"
        )
        
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("тЬЕ Payment Done", callback_data='payment_done')],
            [InlineKeyboardButton("ЁЯФЩ Back", callback_data='get_premium')]
        ])
        
        await call.edit_message_text(payment_text, reply_markup=markup, parse_mode=ParseMode.MARKDOWN)

    @app.on_callback_query(filters.regex("payment_help"))
    async def show_payment_help(client, call: CallbackQuery):
        help_text = (
            "тЭУ **Payment Help & FAQ:**\n\n"
            "**Q: рдХреИрд╕реЗ payment рдХрд░реВрдБ?**\n"
            "A: рдХрд┐рд╕реА рднреА UPI app (PayTM, PhonePe, GPay) рд╕реЗ UPI ID рдкрд░ тВ╣500 рднреЗрдЬреЛ\n\n"
            "**Q: Activate рд╣реЛрдиреЗ рдореЗрдВ рдХрд┐рддрдирд╛ time рд▓рдЧреЗрдЧрд╛?**\n"
            "A: Maximum 24 hours, usually рддреБрд░рдВрдд!\n\n"
            "**Q: Premium features рдХрдм рдорд┐рд▓реЗрдВрдЧреЗ?**\n"
            "A: Activation рдХреЗ рддреБрд░рдВрдд рдмрд╛рдж рд╕рдм features unlock рд╣реЛ рдЬрд╛рдПрдВрдЧреЗ!\n\n"
            "**Q: Refund policy?**\n"
            "A: Service issues рдХреЗ рд▓рд┐рдП contact рдХрд░реЛ, genuine cases рдореЗрдВ refund рдорд┐рд▓реЗрдЧрд╛\n\n"
            "**Q: Multiple groups рдореЗрдВ use рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ?**\n"
            "A: рд╣рд╛рдБ! Premium account рд╕рднреА groups рдореЗрдВ рдХрд╛рдо рдХрд░реЗрдЧрд╛!"
        )
        
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯТ│ Make Payment", callback_data='payment_info')],
            [InlineKeyboardButton("ЁЯФЩ Back", callback_data='get_premium')]
        ])
        
        await call.edit_message_text(help_text, reply_markup=markup, parse_mode=ParseMode.MARKDOWN)

    @app.on_callback_query(filters.regex("payment_done"))
    async def payment_confirmation(client, call: CallbackQuery):
        confirmation_text = (
            "ЁЯОЙ **Payment Done? Awesome!**\n\n"
            "рдЕрдм рдмрд╕ рдПрдХ рдХрд╛рдо рдХрд░рдирд╛ рд╣реИ:\n"
            "ЁЯУ╕ Payment рдХрд╛ screenshot рдпрд╛ transaction ID рдореБрдЭреЗ рднреЗрдЬреЛ\n\n"
            "ЁЯУи **рдХрд╣рд╛рдБ рднреЗрдЬрдирд╛ рд╣реИ?**\n"
            "рдпрд╣реАрдВ рдЗрд╕ chat рдореЗрдВ screenshot forward рдХрд░ рджреЛ рдпрд╛ transaction details type рдХрд░ рджреЛ!\n\n"
            "тП░ **рдХрд┐рддрдирд╛ wait рдХрд░рдирд╛ рд╣реЛрдЧрд╛?**\n"
            "24 рдШрдВрдЯреЗ рдХреЗ рдЕрдВрджрд░ premium activate рд╣реЛ рдЬрд╛рдПрдЧрд╛! Usually рддреЛ рддреБрд░рдВрдд рд╣реА рд╣реЛ рдЬрд╛рддрд╛ рд╣реИ! ЁЯШК\n\n"
            "**рдзрдиреНрдпрд╡рд╛рдж for choosing premium! ЁЯТЦ**"
        )
        
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ Back to Menu", callback_data='back_to_menu')]
        ])
        
        await call.edit_message_text(confirmation_text, reply_markup=markup, parse_mode=ParseMode.MARKDOWN)

    @app.on_message(filters.command("addpremium") & filters.private)
    async def add_premium_command(client, message: Message):
        """Add premium to a user (Owner only)."""
        user_id = message.from_user.id

        if not utils.is_owner(user_id):
            await message.reply_text("тЫФ This command is only for bot owner!")
            return

        try:
            parts = message.text.split()
            if len(parts) < 2:
                await message.reply_text(
                    "ЁЯУЭ **Usage:** `/addpremium <user_id> [months]`\n\n"
                    "**Example:**\n"
                    "тАв `/addpremium 123456789` (adds 5 months)\n"
                    "тАв `/addpremium 123456789 12` (adds 12 months)"
                )
                return

            target_user_id = int(parts[1])
            months = int(parts[2]) if len(parts) > 2 else PREMIUM_DURATION_MONTHS

            await db.add_premium_user(target_user_id, months) # Use the async method from db

            await message.reply_text(
                f"тЬЕ **Premium Activated!**\n\n"
                f"ЁЯСд **User ID:** `{target_user_id}`\n"
                f"тП░ **Duration:** {months} months"
            )

            # Notify the user
            try:
                premium_info = await db.get_premium_info(target_user_id)
                expires_at_str = utils.format_time_remaining(premium_info['expires_at']) if premium_info else "N/A"
                await app.send_message(
                    target_user_id,
                    f"ЁЯОЙ **Congratulations!**\n\n"
                    f"рддреБрдореНрд╣рд╛рд░рд╛ premium account activate рд╣реЛ рдЧрдпрд╛ рд╣реИ! {months} рдорд╣реАрдиреЗ рддрдХ enjoy рдХрд░реЛ! ЁЯТЦ\n\n"
                    f"тП░ **Expires in:** {expires_at_str}\n"
                    f"рдЕрдм рд╕рднреА premium features available рд╣реИрдВ! Type /premium to check status."
                )
            except Exception as e:
                await message.reply_text(f"тЪая╕П Premium added but couldn't notify user ({target_user_id}): {e}")
                
        except ValueError:
            await message.reply_text("тЭМ Invalid user ID or months value!")
        except Exception as e:
            await message.reply_text(f"тЭМ Error: {e}")

    @app.on_message(filters.command("premium") & filters.private)
    async def check_premium_status(client, message: Message):
        user_id = message.from_user.id
        
        if await db.is_premium(user_id):
            premium_info = await db.get_premium_info(user_id)
            
            if premium_info and premium_info['expires_at'] > 0:
                expires_at_str = utils.format_time_remaining(premium_info['expires_at'])
                status_text = (
                    "ЁЯСС **Premium Status: ACTIVE**\n\n"
                    f"тП░ **Time Remaining:** {expires_at_str}\n"
                    f"ЁЯУЕ **Activated On:** {time.strftime('%d %b %Y', time.localtime(premium_info['activated_at']))}\n"
                    f"ЁЯУж **Plan:** {premium_info['months_purchased']} months\n\n"
                    "ЁЯОЙ Enjoy all premium features! Keep rocking! ЁЯТЦ"
                )
            else: # For owner or invalid premium_until
                status_text = "ЁЯСС **Premium Status: ACTIVE** (Owner Account or Lifetime)"
        else:
            status_text = (
                "тЭМ **Premium Status: NOT ACTIVE**\n\n"
                "рдкреНрд░реАрдорд┐рдпрдо рд▓реЗрдХрд░ рд╕рднреА exclusive features unlock рдХрд░реЛ! ЁЯТО\n"
                "Type /start рдФрд░ 'Get Premium' button рджрдмрд╛рдУ!"
            )
        
        await message.reply_text(status_text, parse_mode=ParseMode.MARKDOWN)

    @app.on_message(filters.private & (filters.photo | filters.document | filters.text))
    async def handle_payment_proof(client, message: Message):
        """Handle payment screenshots and transaction IDs from users."""
        user_id = message.from_user.id
        user_name = message.from_user.first_name or "Unknown"
        username = f"@{message.from_user.username}" if message.from_user.username else "No username"
        
        # Skip if it's a command or from owner
        if message.text and message.text.startswith('/'):
            return
        if utils.is_owner(user_id):
            return
        
        # Check if user is already premium (no need for payment proof)
        if await db.is_premium(user_id):
            # Reply only once if user keeps sending proof after being premium
            if "already_premium_notified" not in getattr(client, 'user_notification_status', {}).get(user_id, ""):
                await message.reply_text("рддреБрдо рддреЛ рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рдкреНрд░реАрдорд┐рдпрдо рд╣реЛ! рдЕрдм рдкреЗрдореЗрдВрдЯ рдкреНрд░реВрдл рднреЗрдЬрдиреЗ рдХреА рдЬрд╝рд░реВрд░рдд рдирд╣реАрдВ рд╣реИ! ЁЯШЙ")
                client.user_notification_status = getattr(client, 'user_notification_status', {})
                client.user_notification_status[user_id] = "already_premium_notified"
            return
        
        # Keywords that suggest payment proof
        payment_keywords = [
            'payment', 'paid', 'transaction', 'receipt', 'proof', 'screenshot',
            'done', 'completed', 'success', 'upi', 'gpay', 'phonepe', 'paytm',
            'рдХрд░ рджрд┐рдпрд╛', 'рдкреИрд╕реЗ', 'рднреЗрдЬ рджрд┐рдП', 'рд╣реЛ рдЧрдпрд╛', 'рдкреНрд░реАрдорд┐рдпрдо', 'рдкреЗрдореЗрдВрдЯ'
        ]
        
        is_payment_related = False
        
        # Check if it's a photo (likely payment screenshot)
        if message.photo:
            is_payment_related = True
        
        # Check if text contains payment-related keywords
        elif message.text:
            text_lower = message.text.lower()
            if any(keyword in text_lower for keyword in payment_keywords):
                is_payment_related = True
            # Check for transaction ID patterns (numbers/alphanumeric)
            elif len(message.text.strip()) > 8 and any(c.isdigit() for c in message.text):
                is_payment_related = True
        
        # Check if it's a document (could be receipt)
        elif message.document:
            if message.document.file_name:
                filename_lower = message.document.file_name.lower()
                if any(keyword in filename_lower for keyword in ['receipt', 'payment', 'transaction']):
                    is_payment_related = True
        
        if is_payment_related:
            # Send notification to bot owner
            owner_notification = (
                f"ЁЯТ░ **New Payment Proof Received**\n\n"
                f"ЁЯСд **User:** {user_name} ({username})\n"
                f"ЁЯЖФ **User ID:** `{user_id}`\n"
                f"ЁЯУЕ **Date:** {time.strftime('%d %b %Y, %H:%M')}\n\n"
                f"**Message Type:** {'Photo' if message.photo else 'Document' if message.document else 'Text'}\n\n"
                f"**To activate premium, use:**\n"
                f"`/addpremium {user_id}`\n\n"
                f"**To reject, ignore this message.**"
            )
            
            try:
                # Forward the actual message to owner
                await message.forward(BOT_OWNER_ID)
                
                # Send notification with user details
                await client.send_message(
                    BOT_OWNER_ID,
                    owner_notification,
                    parse_mode=ParseMode.MARKDOWN
                )
                
                # Confirm receipt to user
                await message.reply_text(
                    "тЬЕ **Payment proof received!**\n\n"
                    "рддреБрдореНрд╣рд╛рд░рд╛ payment proof рдореБрдЭреЗ рдорд┐рд▓ рдЧрдпрд╛ рд╣реИ! ЁЯУ╕\n"
                    "рдЕрдм рдореИрдВ рдЗрд╕реЗ verify рдХрд░реВрдБрдЧреА рдФрд░ 24 рдШрдВрдЯреЗ рдХреЗ рдЕрдВрджрд░ premium activate рдХрд░ рджреВрдБрдЧреА!\n\n"
                    "рдзрдиреНрдпрд╡рд╛рдж for your patience! ЁЯТЦ",
                    parse_mode=ParseMode.MARKDOWN
                )
                
            except Exception as e:
                # If forwarding fails, at least log it
                print(f"Failed to forward payment proof from {user_id}: {e}")
                
                # Still confirm to user
                await message.reply_text(
                    "тЬЕ **Payment proof received!**\n\n"
                    "рддреБрдореНрд╣рд╛рд░рд╛ payment details рдореБрдЭреЗ рдорд┐рд▓ рдЧрдП рд╣реИрдВ! рдореИрдВ рдЬрд▓реНрджреА рд╣реА verify рдХрд░рдХреЗ premium activate рдХрд░ рджреВрдБрдЧреА!\n\n"
                    "рдзрдиреНрдпрд╡рд╛рдж! ЁЯТЦ"
                )
