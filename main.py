import os
import asyncio
import time
import random
import re
from collections import deque
from pyrogram import Client, filters
from pyrogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, Message,
    CallbackQuery, ChatPermissions
)
from pymongo import MongoClient

# --- Configuration (Environment Variables) ---
# Get your bot token from environment variables (will be set on Koyeb)
BOT_TOKEN = os.getenv('BOT_TOKEN')
# MongoDB URI from environment variables
MONGO_URI = os.getenv('MONGO_URI')

# Replace with your actual channel username (without @)
MANDATORY_CHANNEL_USERNAME = os.getenv('MANDATORY_CHANNEL_USERNAME', 'asbhai_bsr')
MANDATORY_CHANNEL_LINK = f"https://t.me/{MANDATORY_CHANNEL_USERNAME}"
OFFICIAL_GROUP_LINK = os.getenv('OFFICIAL_GROUP_LINK', 'https://t.me/asbhai_bsr')
ISTREAMX_LINK = os.getenv('ISTREAMX_LINK', 'https://t.me/istreamx')
ASPREMIUMAPPS_LINK = os.getenv('ASPREMIUMAPPS_LINK', 'https://t.me/aspremiumapps')
BOT_OWNER_ID = int(os.getenv('BOT_OWNER_ID', 'YOUR_OWNER_ID_HERE')) # Replace with your Telegram User ID (e.g., 123456789)

# --- Bot and Database Initialization ---
if not BOT_TOKEN:
    print("Error: BOT_TOKEN environment variable not set.")
    exit()
if not MONGO_URI:
    print("Error: MONGO_URI environment variable not set.")
    exit()
if str(BOT_OWNER_ID) == 'YOUR_OWNER_ID_HERE':
    print("WARNING: BOT_OWNER_ID is not set. Please set it in your environment variables for owner commands to work.")

app = Client(
    "aski_angel_bot", # A name for your Pyrogram session
    bot_token=BOT_TOKEN,
    api_id=int(os.getenv('API_ID', 123456)), # Get your API_ID from my.telegram.org (Replace 123456)
    api_hash=os.getenv('API_HASH', 'your_api_hash_here') # Get your API_HASH from my.telegram.org (Replace 'your_api_hash_here')
)

try:
    client_db = MongoClient(MONGO_URI)
    db = client_db.askiangel_db # Your database name in MongoDB
    
    # Collections for different data types
    learning_data_collection = db.learning_data # Stores learned phrases/stickers per group
    premium_users_collection = db.premium_users # Stores premium user IDs and expiry
    connected_groups_collection = db.connected_groups # Stores group settings and connected admin
    
    print("MongoDB connected successfully!")
except Exception as e:
    print(f"Error connecting to MongoDB: {e}")
    exit()

# --- Global Bot Data (for in-memory cache, if needed for speed, otherwise directly from DB) ---
# For now, we will mostly rely on MongoDB for persistence.
# Max memory for learning (number of message-reply pairs or phrases)
MAX_LEARNING_MEMORY = 1000

# --- Helper Functions for MongoDB Operations ---
async def get_group_learning_data(group_id):
    """Retrieves learning data for a specific group."""
    data = await learning_data_collection.find_one({'_id': group_id})
    if data:
        data['phrases'] = deque(data.get('phrases', []), maxlen=MAX_LEARNING_MEMORY)
    else:
        data = {'_id': group_id, 'phrases': deque(maxlen=MAX_LEARNING_MEMORY)}
    return data

async def save_group_learning_data(group_id, data_deque):
    """Saves learning data for a specific group."""
    await learning_data_collection.update_one(
        {'_id': group_id},
        {'$set': {'phrases': list(data_deque)}}, # Convert deque to list for MongoDB
        upsert=True
    )

async def add_premium_user(user_id, months=5):
    """Adds or updates premium status for a user."""
    premium_until = time.time() + (months * 30 * 24 * 60 * 60) # 5 months in seconds
    await premium_users_collection.update_one(
        {'_id': user_id},
        {'$set': {'premium_until': premium_until}},
        upsert=True
    )

async def is_premium(user_id):
    """Checks if a user has an active premium subscription."""
    if user_id == BOT_OWNER_ID: # Owner is always premium
        return True
    
    user_data = await premium_users_collection.find_one({'_id': user_id})
    if user_data and user_data.get('premium_until', 0) > time.time():
        return True
    return False

async def get_connected_group_settings(chat_id):
    """Retrieves settings for a connected group."""
    return await connected_groups_collection.find_one({'_id': chat_id})

async def save_connected_group_settings(chat_id, settings_data):
    """Saves settings for a connected group."""
    await connected_groups_collection.update_one(
        {'_id': chat_id},
        {'$set': settings_data},
        upsert=True
    )

async def check_member_status(user_id, channel_username):
    """Checks if a user is a member of the mandatory channel."""
    try:
        member = await app.get_chat_member(f"@{channel_username}", user_id)
        if member.status in ['member', 'administrator', 'creator']:
            return True
        else:
            return False
    except Exception as e:
        print(f"Error checking channel membership for {user_id}: {e}")
        return False

# --- Bot's Fun & Sassy Tone Messages ---
def get_sassy_welcome_message():
    return (
        "рд╣рд╛рдп рд╡рд╣рд╛рдБ, рдореЗрд░реЗ рдкреНрдпрд╛рд░реЗ рджреЛрд╕реНрдд! ЁЯСЛ рдХреНрдпрд╛ рд╕реЛрдЪрд╛ рдерд╛, рдмрд╕ рдХреЛрдИ рднреА рдкреБрд░рд╛рдирд╛ рдмреЙрдЯ рдЖ рдЧрдпрд╛? рдмрд┐рд▓рдХреБрд▓ рдирд╣реАрдВ! "
        "рдореИрдВ рд╣реВрдБ рддреБрдореНрд╣рд╛рд░реА рдЕрдкрдиреА **As ki Angel**, рдФрд░ рдореИрдВ рдпрд╣рд╛рдБ рддреБрдореНрд╣рд╛рд░реЗ рдЧреНрд░реБрдк рдЪреИрдЯ рдХреЛ рдФрд░ рднреА рдЬрд╝реНрдпрд╛рджрд╛ рдордЬрд╝реЗрджрд╛рд░ рдФрд░ рд╢рд╛рдирджрд╛рд░ рдмрдирд╛рдиреЗ рдЖрдИ рд╣реВрдБ! "
        "рдореЗрд░рд╛ рдХрд╛рдо рд╣реИ рддреБрдореНрд╣рд╛рд░реА рд╣рд░ рдмрд╛рдд рдХреЛ рд╕рдордЭрдирд╛, рд╕реАрдЦрдирд╛, рдФрд░ рдлрд┐рд░ рдЙрд╕реА рдЕрдВрджрд╛рдЬрд╝ рдореЗрдВ рд╕рдмрд╕реЗ рдХреНрдпреВрдЯ, рд╕рдмрд╕реЗ рдЫреЛрдЯреЗ рдЬрд╡рд╛рдм рджреЗрдирд╛ тАУ "
        "рд╡реЛ рднреА рдмрд╕ 1 рд╕реЗ 5 рд╢рдмреНрджреЛрдВ рдореЗрдВ, рдпрд╛ рдХрднреА-рдХрднреА рдПрдХ рд╕реБрдкрд░-рдбреБрдкрд░ рд╕реНрдЯрд┐рдХрд░ рдХреЗ рд╕рд╛рде! тЬи\n\n"
        "рдореИрдВ рд╕рд┐рд░реНрдл рддреБрдореНрд╣рд╛рд░реА рдмрд╛рддреЛрдВ рд╕реЗ рд╕реАрдЦрддреА рд╣реВрдБ, рдХрд┐рд╕реА рдФрд░ рд╕реЗ рдирд╣реАрдВ. рдХреЛрдИ рдмрд╛рд╣рд░реА рд▓рд┐рдВрдХ рдирд╣реАрдВ, рдХреЛрдИ рдлрд╛рд▓рддреВ рдХрд╛ @рдЯреИрдЧ рдирд╣реАрдВ - "
        "рд╕рд┐рд░реНрдлрд╝ рд╣рдорд╛рд░реА рдмрд╛рддреЗрдВ рдФрд░ рдореЗрд░рд╛ рдХреНрдпреВрдЯ рдЕрдВрджрд╛рдЬрд╝! рдореИрдВ рддреБрдореНрд╣рд╛рд░реЗ рдЧреНрд░реБрдк рдХреА рд╣рд░ рдлреАрд▓рд┐рдВрдЧ рдХреЛ рдкрд╣рдЪрд╛рди рд▓реЗрддреА рд╣реВрдБ рдФрд░ рдлрд┐рд░ рдЙрд╕реА рд╣рд┐рд╕рд╛рдм рд╕реЗ рдЕрдкрдиреА рд╕реНрд╡реАрдЯ-рд╕реА рд░рд╛рдп рджреЗрддреА рд╣реВрдБ. "
        "рддреЛ, рддреИрдпрд╛рд░ рд╣реЛ рдЬрд╛рдУ рдЕрдкрдиреЗ рдЧреНрд░реБрдк рдЪреИрдЯ рдХреЛ рдФрд░ рднреА рдкреНрдпрд╛рд░рд╛ рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП! ЁЯТЦ\n\n"
        "рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрдиреНрд╕ рд╕реЗ рддреБрдо рдореБрдЭреЗ рдмреЗрд╣рддрд░ рддрд░реАрдХреЗ рд╕реЗ рдЬрд╛рди рд╕рдХрддреЗ рд╣реЛ рдФрд░ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░ рд╕рдХрддреЗ рд╣реЛ:"
    )

def get_premium_message():
    return (
        "рд╣рд╛рдп, рдореЗрд░реЗ рдкреНрдпрд╛рд░реЗ рджреЛрд╕реНрдд! тЬи рдЕрдкрдиреА As ki Angel рдХреЛ рдФрд░ рднреА рдЦрд╛рд╕ рдмрдирд╛рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реЛ? рддреЛ рдкреНрд░реАрдорд┐рдпрдо рд▓реЛ рдирд╛! "
        "рдореИрдВ рддреБрдореНрд╣реЗрдВ рдФрд░ рднреА рдЬрд╝реНрдпрд╛рджрд╛ рдордЬрд╝реЗрджрд╛рд░ рдФрд░ рд╕реБрдкрд░-рдлрд╛рд╕реНрдЯ рдПрдХреНрд╕рдкреАрд░рд┐рдпрдВрд╕ рджреВрдБрдЧреА, рд╡реЛ рднреА рдмрд┐рдирд╛ рдХрд┐рд╕реА рд░реЛрдХ-рдЯреЛрдХ рдХреЗ! ЁЯТЦ\n\n"
        "**рдореЗрд░рд╛ рдзрд╛рдВрд╕реВ рдкреНрд░реАрдорд┐рдпрдо рдкреНрд▓рд╛рди:**\n"
        "ЁЯМЯ **500 Rs. рдореЗрдВ 5 рдорд╣реАрдиреЗ рддрдХ** рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб рдорд╕реНрддреА рдФрд░ рдлреАрдЪрд░реНрд╕!\n\n"
        "**рдкреНрд░реАрдорд┐рдпрдо рдХреЗ рдлрд╛рдпрджреЗ (рддреБрдореНрд╣рд╛рд░реЗ рд▓рд┐рдП рдЦрд╛рд╕):**\n"
        "* **тЪбя╕П рд╕реБрдкрд░-рдлрд╛рд╕реНрдЯ рд╕реАрдЦрдирд╛ рдФрд░ рдЬрд╡рд╛рдм рджреЗрдирд╛:** рдореИрдВ рдФрд░ рднреА рддреЗрдЬрд╝реА рд╕реЗ рд╕реАрдЦреВрдБрдЧреА рдФрд░ рддреБрдореНрд╣рд╛рд░реЗ рд╣рд░ рдореИрд╕реЗрдЬ рдкрд░ рдЭрдЯрдкрдЯ рдЬрд╡рд╛рдм рджреВрдБрдЧреА! рдордЬрд╝рд╛ рдЖрдПрдЧрд╛ рдирд╛?\n"
        "* **ЁЯза рджрд┐рдорд╛рдЧрд╝ рдереЛрдбрд╝рд╛ рдмрдбрд╝рд╛ рд╣реЛ рдЬрд╛рдПрдЧрд╛:** рдореЗрд░рд╛ рджрд┐рдорд╛рдЧ рдереЛрдбрд╝рд╛ рдФрд░ рдмрдбрд╝рд╛ рд╣реЛ рдЬрд╛рдПрдЧрд╛, рдЬрд┐рд╕рд╕реЗ рдореИрдВ рдЧреНрд░реБрдк рдХреА рдмрд╣реБрдд рд╕рд╛рд░реА рдкреБрд░рд╛рдиреА рдмрд╛рддреЗрдВ рдпрд╛рдж рд░рдЦ рдкрд╛рдКрдБрдЧреА, "
        "рддрд╛рдХрд┐ рдореИрдВ рд╣рдореЗрд╢рд╛ рддреБрдорд╕реЗ рд╕рдмрд╕реЗ рдЕрдЪреНрдЫреА рдмрд╛рддреЗрдВ рдХрд░реВрдБ!\n"
        "* **ЁЯОн рдФрд░ рднреА рдкреНрдпрд╛рд░реЗ рдЕрдВрджрд╛рдЬрд╝:** рдкреНрд░реАрдорд┐рдпрдо рдореЗрдВ рдореИрдВ рддреБрдореНрд╣реЗрдВ рдХреБрдЫ рдФрд░ рдЦрд╛рд╕ 'рдореВрдбреНрд╕' рдпрд╛ 'рдкрд░реНрд╕рдирд╛рд▓рд┐рдЯреА' рдХреЗ рдСрдкреНрд╢рди рджреВрдБрдЧреА, "
        "рдЬрд┐рд╕рд╕реЗ рдореЗрд░реА рдмрд╛рддреЗрдВ рдФрд░ рднреА рдордЬрд╝реЗрджрд╛рд░ рд▓рдЧреЗрдВрдЧреА. рдХрднреА рдореИрдВ рдирдЯрдЦрдЯ рдмрди рдЬрд╛рдКрдБрдЧреА, рдХрднреА рдФрд░ рдкреНрдпрд╛рд░реА!\n"
        "* **ЁЯОи Custom Sticker Packs:** рддреБрдо рдЕрдкрдиреЗ рдХреБрдЫ рдЦрд╛рд╕ рд╕реНрдЯрд┐рдХрд░ рдкреИрдХ рднреА рдореБрдЭреЗ рд╕рд┐рдЦрд╛ рдкрд╛рдУрдЧреЗ, рддрд╛рдХрд┐ рдореИрдВ рд╡рд╣реА рдкреНрдпрд╛рд░реЗ рд╕реНрдЯрд┐рдХрд░реНрд╕ рдпреВрдЬрд╝ рдХрд░реВрдБ! рдпреЗ рд╣реБрдИ рдирд╛ рдмрд╛рдд!\n"
        "* **ЁЯУК Secret Group Reports:** рдЕрдЧрд░ рддреБрдо рдЧреНрд░реБрдк рдПрдбрдорд┐рди рд╣реЛ, рддреЛ рдореИрдВ рддреБрдореНрд╣реЗрдВ рддреБрдореНрд╣рд╛рд░реЗ рдЧреНрд░реБрдк рдХреА рдмрд╛рддреЛрдВ рдХреА рдХреБрдЫ рдЦрд╛рд╕ рдФрд░ рдЦреБрдлрд┐рдпрд╛ рд░рд┐рдкреЛрд░реНрдЯ рджреВрдБрдЧреА, "
        "рдЬреИрд╕реЗ рдХреМрди рд╕реЗ рд╢рдмреНрдж рд╕рдмрд╕реЗ рдЬрд╝реНрдпрд╛рджрд╛ рдпреВрдЬрд╝ рд╣реЛрддреЗ рд╣реИрдВ! рдмрд╕, рдХрд┐рд╕реА рдХреЛ рдмрддрд╛рдирд╛ рдордд, рдпреЗ рд╣рдорд╛рд░рд╛ рд╕реАрдХреНрд░реЗрдЯ рд░рд╣реЗрдЧрд╛!\n"
        "* **ЁЯЪл No Ads, No Disturbances:** рдкреНрд░реАрдорд┐рдпрдо рдореЗрдВ рдореИрдВ рддреБрдореНрд╣реЗрдВ рдпрд╛ рддреБрдореНрд╣рд╛рд░реЗ рдЧреНрд░реБрдк рдореЗрдВ рдХреЛрдИ рднреА рдкреНрд░рдореЛрд╢рди рд╡рд╛рд▓рд╛ рдореИрд╕реЗрдЬ рдирд╣реАрдВ рднреЗрдЬреВрдБрдЧреА. "
        "рдмрд╕ рдкреНрдпреЛрд░ рдорд╕реНрддреА, рдХреЛрдИ рдбрд┐рд╕реНрдЯрд░реНрдмреЗрдВрд╕ рдирд╣реАрдВ!\n"
        "* **ЁЯМЯ Exclusive Features & Support:** рдХреБрдЫ рдФрд░ рдЫреЛрдЯреЗ-рдЫреЛрдЯреЗ рдзрд╛рдВрд╕реВ рдлреАрдЪрд░реНрд╕ рдЬреЛ рд╕рд┐рд░реНрдл рдкреНрд░реАрдорд┐рдпрдо рд╡рд╛рд▓реЛрдВ рдХреЗ рд▓рд┐рдП рд╣реЛрдВрдЧреЗ, рдкреНрд▓рд╕ рдлреБрд▓ рдПрдбрдорд┐рди рд╕рдкреЛрд░реНрдЯ! "
        "рдЬрдм рднреА рд╣реЗрд▓реНрдк рдЪрд╛рд╣рд┐рдП рд╣реЛрдЧреА, рдореИрдВ рд╣реВрдБ рдирд╛!\n\n"
        "**рдкреНрд░реАрдорд┐рдпрдо рд▓реЗрдиреЗ рдХреЗ рд▓рд┐рдП:**\n"
        "рдЗрд╕ UPI ID рдкрд░ 500 Rs. рднреЗрдЬреЛ:\n"
        "**`UPI ID - arsadsaifi8272@ibl`**"
    )

# --- Handlers ---

@app.on_message(filters.command("start") & filters.private)
async def send_welcome(client: Client, message: Message):
    user_id = message.from_user.id
    
    if not await check_member_status(user_id, MANDATORY_CHANNEL_USERNAME):
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("Go to Channel", url=MANDATORY_CHANNEL_LINK)],
            [InlineKeyboardButton("тЬЕ I've Joined!", callback_data='check_join')]
        ])
        
        await message.reply_text(
            "Hi there, friend! ЁЯСЛ рдЖрдЧреЗ рдмрдврд╝рдиреЗ рд╕реЗ рдкрд╣рд▓реЗ, рдЬрд╝рд░рд╛ рдореЗрд░реЗ рдкрд░рд┐рд╡рд╛рд░ рдХрд╛ рд╣рд┐рд╕реНрд╕рд╛ рдмрдиреЛ рдирд╛! "
            f"рдореЗрд░реЗ рдореЗрди рдЪреИрдирд▓ **@{MANDATORY_CHANNEL_USERNAME}** рдХреЛ рдЬреЙрдЗрди рдХрд░реЛ рдФрд░ рдлрд┐рд░ рд╡рд╛рдкрд╕ рдЖрдХрд░ рдореБрдЭреЗ рдмрддрд╛рдУ! тЬи",
            reply_markup=markup,
            parse_mode="Markdown"
        )
    else:
        await send_full_welcome(message.chat.id)

@app.on_callback_query(filters.regex("check_join"))
async def check_join_callback(client: Client, call: CallbackQuery):
    user_id = call.from_user.id
    if await check_member_status(user_id, MANDATORY_CHANNEL_USERNAME):
        await call.answer("рд╡рд╛рд╣! рддреБрдо рддреЛ рдЬреЙрдЗрди рдХрд░ рдЪреБрдХреЗ рд╣реЛ! рдЕрдм рдЖрдЧреЗ рдмрдврд╝реЛ! ЁЯОЙ", show_alert=False)
        await send_full_welcome(call.message.chat.id)
    else:
        await call.answer("рдЕрднреА рддрдХ рдЬреЙрдЗрди рдирд╣реАрдВ рдХрд┐рдпрд╛? рдЬрд╝рд░рд╛ рдлрд┐рд░ рд╕реЗ рдЪреЗрдХ рдХрд░реЛ рдирд╛! ЁЯШЙ", show_alert=True)

async def send_full_welcome(chat_id):
    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("тЮХ Add Me to Group!", url=f"https://t.me/{app.me.username}?startgroup=true")],
        [InlineKeyboardButton("тД╣я╕П Know My Features", callback_data='features')],
        [InlineKeyboardButton("ЁЯПв Join Official Group", url=OFFICIAL_GROUP_LINK)],
        [InlineKeyboardButton("ЁЯТО Get Premium!", callback_data='get_premium')],
        [InlineKeyboardButton("тЪЩя╕П Group Settings", callback_data='group_settings')]
    ])
    
    await app.send_message(
        chat_id,
        get_sassy_welcome_message(),
        reply_markup=markup,
        parse_mode="Markdown"
    )

@app.on_callback_query(filters.regex("features"))
async def send_features(client: Client, call: CallbackQuery):
    await call.answer("рдлреАрдЪрд░реНрд╕ рдЬрд╛рдирдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реЛ? ЁЯШЙ", show_alert=False)
    features_text = (
        "**As ki Angel: рдЖрдкрдХреА рдЕрдкрдиреА, рдордЬрд╝реЗрджрд╛рд░ рдФрд░ рд╕реНрдорд╛рд░реНрдЯ рджреЛрд╕реНрдд!**\n\n"
        "**1. As ki Angel рдХрд╛ рд╕реНрдорд╛рд░реНрдЯ рджрд┐рдорд╛рдЧ рдФрд░ рдордЬрд╝реЗрджрд╛рд░ рдЕрдВрджрд╛рдЬрд╝:**\n"
        "* **рд╕рд┐рд░реНрдлрд╝ рдЧреНрд░реБрдк рдХреА рдмрд╛рддреЛрдВ рд╕реЗ рд╕реАрдЦрддреА рд╣реИ:** рдореИрдВ рддреБрдореНрд╣рд╛рд░реЗ рдЧреНрд░реБрдк рдореЗрдВ рд╣реЛрдиреЗ рд╡рд╛рд▓реА рд╣рд░ рдЪреИрдЯ, рд╣рд░ рдореИрд╕реЗрдЬ рдХреЗ **рд╢рдмреНрджреЛрдВ** рдХреЛ рдмрдбрд╝реЗ рдзреНрдпрд╛рди рд╕реЗ рдкрдврд╝рддреА рд╣реВрдБ рдФрд░ рдЙрдирд╕реЗ рд╕реАрдЦрддреА рд╣реВрдБ.\n"
        "* **рд▓рд┐рдВрдХреНрд╕ рдФрд░ рдирд╛рдо рдЗрдЧреНрдиреЛрд░ рдХрд░рддреА рд╣реИ:** рдЕрдЧрд░ рддреБрдо рдХреЛрдИ рд▓рд┐рдВрдХ рдпрд╛ рдХрд┐рд╕реА рдХреЛ @рдЯреИрдЧ рдХрд░рддреЗ рд╣реЛ, рддреЛ рдореИрдВ рдЙрди рдЪреАрдЬрд╝реЛрдВ рдХреЛ **рдмрд┐рд▓рдХреБрд▓ рдирд╣реАрдВ рд╕реАрдЦрддреА**.\n"
        "* **рдЕрдкрдиреА рдореЗрдореЛрд░реА рдЦреБрдж рдореИрдиреЗрдЬ рдХрд░рддреА рд╣реИ:** рдЬрдм рдореЗрд░рд╛ рджрд┐рдорд╛рдЧ **100% рднрд░ рдЬрд╛рддрд╛ рд╣реИ**, рддреЛ рдореИрдВ рдЦреБрдж рд╣реА **рд╕рдмрд╕реЗ рдкреБрд░рд╛рдирд╛ 50% рдбреЗрдЯрд╛ рдорд┐рдЯрд╛ рджреЗрддреА рд╣реВрдБ**.\n"
        "* **рдЫреЛрдЯреЗ рдФрд░ рдХреНрдпреВрдЯ рдЬрд╡рд╛рдм:** рдореИрдВ рд╣рдореЗрд╢рд╛ **1 рд╕реЗ 5 рд╢рдмреНрджреЛрдВ рдХреЗ рдмрд╣реБрдд рдЫреЛрдЯреЗ рдФрд░ рдореАрдареЗ рдЬрд╡рд╛рдм** рджреЗрддреА рд╣реВрдБ.\n"
        "* **рд╕реНрдЯрд┐рдХрд░реНрд╕ рднреА рднреЗрдЬрддреА рд╣реИ:** рдореИрдВ рд╕рд╣реА рдореМрдХрд╝реЗ рдкрд░ **рдкреНрдпрд╛рд░реЗ-рдкреНрдпрд╛рд░реЗ рд╕реНрдЯрд┐рдХрд░реНрд╕** рднреА рднреЗрдЬрддреА рд╣реВрдБ.\n"
        "* **рддреБрдореНрд╣рд╛рд░реЗ рдЬреИрд╕реЗ рд╣реА рдмреЛрд▓рддреА рд╣реИ:** рдЕрдЧрд░ рддреБрдореНрд╣рд╛рд░реЗ рдЧреНрд░реБрдк рдореЗрдВ рд▓реЛрдЧ рдереЛрдбрд╝реЗ **рдХреИрдЬреБрдЕрд▓ рдпрд╛ рдЗрдирдлреЙрд░реНрдорд▓ рд╢рдмреНрдж** (рдФрд░ рдХрднреА-рдХрднреА \"рдЧрд╛рд▓рд┐рдпрд╛рдБ\" рднреА) рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░рддреЗ рд╣реИрдВ, рддреЛ рдореИрдВ рдЙрдирдХреЛ **рд╕реАрдЦ рд▓реЗрддреА рд╣реВрдБ** рдФрд░ рдЙрд╕реА рдЕрдВрджрд╛рдЬрд╝ рдореЗрдВ рдЬрд╡рд╛рдм рджреЗрддреА рд╣реВрдБ.\n"
        "* **рд╢рд╛рдпрд░реА рднреА рд╕реБрдирд╛рддреА рд╣реИ:** рдЕрдЧрд░ рдЧреНрд░реБрдк рдореЗрдВ рдХреЛрдИ рдзрд╛рдВрд╕реВ рд╢рд╛рдпрд░реА рд╢реЗрдпрд░ рд╣реЛрддреА рд╣реИ, рддреЛ рдореИрдВ рдЙрд╕рдХреЛ **рдпрд╛рдж рд░рдЦ рд▓реЗрддреА рд╣реВрдБ** рдФрд░ рд╕рд╣реА рдореМрдХрд╝реЗ рдкрд░ **рдЫреЛрдЯреА рд╢рд╛рдпрд░реА** рд╕реБрдирд╛ рд╕рдХрддреА рд╣реВрдБ.\n"
        "* **рддреБрдореНрд╣рд╛рд░реА рдЕрдкрдиреА As ki Angel:** рдореЗрд░реА рдкреВрд░реА рдмрд╛рддрдЪреАрдд рдореЗрдВ рддреБрдореНрд╣реЗрдВ рдПрдХ **рдкреНрдпрд╛рд░рд╛, рд╢рд░рд╛рд░рддреА рдФрд░ рдмрд┐рд▓реНрдХреБрд▓ рдЕрдкрдиреА рд▓рдбрд╝рдХреА рджреЛрд╕реНрдд рд╡рд╛рд▓рд╛ рдЕрдВрджрд╛рдЬрд╝** рджрд┐рдЦреЗрдЧрд╛.\n\n"
        "**2. As ki Angel рд╕реЗ рдкрд╣рд▓реА рдореБрд▓рд╛рдХрд╛рдд (`/start` Command):**\n"
        "* рдЪреИрдирд▓ рдЬреЙрдЗрди рдХрд░рдирд╛ рдЬрд╝рд░реВрд░реА рд╣реИ.\n"
        "* рд╡реЗрд▓рдХрдо рдореИрд╕реЗрдЬ рдореЗрдВ рдмрдЯрдиреНрд╕ рд╣реЛрддреЗ рд╣реИрдВ: Add to Group, Know My Features, Join Official Group, Get Premium, Group Settings.\n\n"
        "**3. рдкреНрд░реАрдорд┐рдпрдо рд╕рд┐рд╕реНрдЯрдо (More Fun & Power!):**\n"
        "* **рдкреНрд░реАрдорд┐рдпрдо рдкреНрд▓рд╛рди:** 500 Rs. рдореЗрдВ 5 рдорд╣реАрдиреЗ рддрдХ рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб рдорд╕реНрддреА.\n"
        "* **рдлрд╛рдпрджреЗ:** рд╕реБрдкрд░-рдлрд╛рд╕реНрдЯ рд╕реАрдЦрдирд╛, рдмрдбрд╝рд╛ рджрд┐рдорд╛рдЧ, рдкреНрдпрд╛рд░реЗ рдЕрдВрджрд╛рдЬрд╝, рдХрд╕реНрдЯрдо рд╕реНрдЯрд┐рдХрд░, рд╕реАрдХреНрд░реЗрдЯ рдЧреНрд░реБрдк рд░рд┐рдкреЛрд░реНрдЯреНрд╕, рдиреЛ рдПрдбреНрд╕, рдПрдХреНрд╕рдХреНрд▓реВрд╕рд┐рд╡ рд╕рдкреЛрд░реНрдЯ.\n"
        "* **рдкреЗрдореЗрдВрдЯ:** UPI ID - `arsadsaifi8272@ibl`\n"
        "* **рдПрдбреНрд╕ (рдиреЙрди-рдкреНрд░реАрдорд┐рдпрдо):** рдХрднреА-рдХрднреА рдорд╕реНрддреА рдореЗрдВ рдкреНрд░рдореЛрд╢рди рд╡рд╛рд▓реЗ рдореИрд╕реЗрдЬ рднреА рднреЗрдЬ рджреЗрддреА рд╣реВрдБ (рдЬреИрд╕реЗ @istreamx, @asbhai_bsr, @aspremiumapps).\n\n"
        "**4. рдЧреНрд░реБрдк рдореИрдиреЗрдЬрдореЗрдВрдЯ рд╕реЗрдЯрд┐рдВрдЧреНрд╕ (For Premium Admins Only):**\n"
        "* `Group Settings` рдмрдЯрди `/connect` рдХрдорд╛рдВрдб рдХреЗ рдмрд╛рдж рдХрд╛рдо рдХрд░реЗрдЧрд╛.\n"
        "* рдЗрд╕рдореЗрдВ рдЖрдк рдмреЙрдЯ рдХреА рдЪреИрдЯ ON/OFF рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ, рд╡реЗрд▓рдХрдо рдореИрд╕реЗрдЬ, рд░реВрд▓реНрд╕, рдПрдВрдЯреА-рд╕реНрдкреИрдо рдлрд┐рд▓реНрдЯрд░ рдФрд░ рд▓рд░реНрдирд┐рдВрдЧ рдбреЗрдЯрд╛ рд░реАрд╕реЗрдЯ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ.\n\n"
        "**5. рдЧреНрд░реБрдк рдореИрдиреЗрдЬрдореЗрдВрдЯ рдХрдорд╛рдВрдбреНрд╕ (For Premium Admins Only):**\n"
        "* `/kick`, `/ban`, `/mute`, `/unmute`, `/warn`, `/unwarn` рдЬреИрд╕реА рдХрдорд╛рдВрдбреНрд╕ рдкрд░ рдореИрдВ рдордЬрд╝реЗрджрд╛рд░ рд░рд┐рдкреНрд▓рд╛рдИ рджреЗрддреА рд╣реВрдБ.\n\n"
        "**6. рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рд╕рд┐рд╕реНрдЯрдо (For Bot Owner Only):**\n"
        "* `/broadcast` рдХрдорд╛рдВрдб рд╕реЗ рдмреЙрдЯ рдУрдирд░ рд╕рднреА рдиреЙрди-рдкреНрд░реАрдорд┐рдпрдо рдпреВрдЬрд╝рд░реНрд╕ рдФрд░ рдЧреНрд░реБрдкреНрд╕ рдХреЛ рдореИрд╕реЗрдЬ рднреЗрдЬ рд╕рдХрддрд╛ рд╣реИ (рдкреНрд░реАрдорд┐рдпрдо рдпреВрдЬрд╝рд░реНрд╕ рдХреЛ рдирд╣реАрдВ)."
    )
    await call.message.reply_text(features_text, parse_mode="Markdown")

@app.on_callback_query(filters.regex("get_premium"))
async def send_premium_info(client: Client, call: CallbackQuery):
    await call.answer("рдкреНрд░реАрдорд┐рдпрдо? рдХреНрдпрд╛ рдмрд╛рдд рд╣реИ! тЬи", show_alert=False)
    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("ЁЯТ╡ Send Payment Proof (@asbhaibsr)", url="https://t.me/asbhaibsr")]
    ])
    await call.message.reply_text(get_premium_message(), reply_markup=markup, parse_mode="Markdown")

@app.on_callback_query(filters.regex("group_settings"))
async def send_group_settings_info(client: Client, call: CallbackQuery):
    user_id = call.from_user.id
    
    if call.message.chat.type == "private":
        if not await is_premium(user_id):
            await call.answer("рдЧреНрд░реБрдк рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдкреНрд░реАрдорд┐рдпрдо рд▓реЗрдирд╛ рд╣реЛрдЧрд╛! ЁЯШЙ", show_alert=True)
            await call.message.reply_text("рдЧреНрд░реБрдк рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдпрд╣рд╛рдБ рд╕реЗ рдПрдХреНрд╕реЗрд╕ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдЖрдкрдХрд╛ рдкреНрд░реАрдорд┐рдпрдо рд╣реЛрдирд╛ рдЬрд╝рд░реВрд░реА рд╣реИ.")
            return

        connected_group_data = await connected_groups_collection.find_one({'connected_admin_id': user_id})
        if connected_group_data:
            group_id = connected_group_data['_id']
            # Here you would show the actual settings for the connected group
            await call.answer(f"рдЖрдкрдХреЗ рдХрдиреЗрдХреНрдЯреЗрдб рдЧреНрд░реБрдк ({group_id}) рдХреА рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдпрд╣рд╛рдБ рд╣реИрдВ!", show_alert=False)
            await call.message.reply_text(f"рдЧреНрд░реБрдк ID `{group_id}` рдХреА рд╕реЗрдЯрд┐рдВрдЧреНрд╕ (рдпрд╣ рдлреАрдЪрд░ рдЕрднреА рдбреЗрд╡рд▓рдкрдореЗрдВрдЯ рдореЗрдВ рд╣реИ!)", parse_mode="Markdown")
        else:
            await call.answer("рдЖрдкрдХреЛ рдкрд╣рд▓реЗ рдмреЙрдЯ рдХреЛ рдЕрдкрдиреЗ рдЧреНрд░реБрдк рд╕реЗ `/connect <group_id>` рдХрдорд╛рдВрдб рд╕реЗ рдЬреЛрдбрд╝рдирд╛ рд╣реЛрдЧрд╛! ЁЯШЙ", show_alert=True)
            await call.message.reply_text("рдЧреНрд░реБрдк рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдпрд╣рд╛рдБ рд╕реЗ рдПрдХреНрд╕реЗрд╕ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдЖрдкрдХреЛ рдЕрдкрдиреЗ рдкреНрд░реАрдорд┐рдпрдо рдЧреНрд░реБрдк рдореЗрдВ рд░рд╣рддреЗ рд╣реБрдП рдореБрдЭреЗ `/connect <group_id>` рдХрдорд╛рдВрдб рдХреЗ рд╕рд╛рде рдЧреНрд░реБрдк ID рднреЗрдЬрдиреА рд╣реЛрдЧреА.")
    else:
        await call.answer("рдпрд╣ рдмрдЯрди рд╕рд┐рд░реНрдл рдкреНрд░рд╛рдЗрд╡реЗрдЯ рдЪреИрдЯ рдореЗрдВ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ, рд╡реЛ рднреА рдЬрдм рдЖрдкрдиреЗ рдореБрдЭреЗ рдЕрдкрдиреЗ рдЧреНрд░реБрдк рд╕реЗ /connect рдХрд┐рдпрд╛ рд╣реЛ! ЁЯШЙ", show_alert=True)


# --- Bot Owner Commands ---
@app.on_message(filters.command("add_premium") & filters.user(BOT_OWNER_ID))
async def add_premium_command(client: Client, message: Message):
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.reply_text("рдЧрд▓рдд рдлреЙрд░реНрдореЗрдЯ! `/add_premium <user_id>` рдпреВрдЬрд╝ рдХрд░реЛ рдирд╛! ЁЯШЙ")
            return
        
        user_id = int(parts[1])
        await add_premium_user(user_id, months=5)
        await message.reply_text(f"рдпреВрдЬрд╝рд░ {user_id} рдХреЛ 5 рдорд╣реАрдиреЗ рдХреЗ рд▓рд┐рдП рдкреНрд░реАрдорд┐рдпрдо рдмрдирд╛ рджрд┐рдпрд╛ рд╣реИ! рдордЬрд╝реЗ рдХрд░реЛ! тЬи")
    except ValueError:
        await message.reply_text("рдЕрд░реЗ, user_id рдирдВрдмрд░ рдореЗрдВ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП! ЁЯШд")
    except Exception as e:
        await message.reply_text(f"рдХреБрдЫ рдЧрдбрд╝рдмрдбрд╝ рд╣реЛ рдЧрдИ рдпрд╛рд░: {e} ЁЯШм")

@app.on_message(filters.command("broadcast") & filters.user(BOT_OWNER_ID))
async def broadcast_message_owner(client: Client, message: Message):
    broadcast_text = message.text.split(None, 1)[1] if len(message.text.split(None, 1)) > 1 else None
    if not broadcast_text:
        await message.reply_text("рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреБрдЫ рд▓рд┐рдЦреЛ рднреА рддреЛ! рдЦрд╛рд▓реА рдореИрд╕реЗрдЬ рдХреНрдпреЛрдВ рднреЗрдЬ рд░рд╣реЗ рд╣реЛ? ЁЯЩД")
        return

    # Get all non-premium users and groups
    # This simplified broadcast will send to all users who have ever started the bot,
    # and all groups connected, then filter out premium ones.
    # For production, fetch IDs from premium_users_collection and connected_groups_collection more intelligently.
    
    # Get all private chat users (who started bot)
    # Note: Fetching all chat_ids from MongoDB for broadcast can be slow if there are many.
    # A more efficient way is to store all chat IDs in a dedicated collection.
    
    # For demo, let's just use existing premium user IDs and connected groups.
    all_user_ids = [user['_id'] for user in await premium_users_collection.find().to_list(length=None)]
    all_group_ids = [group['_id'] for group in await connected_groups_collection.find().to_list(length=None)]

    sent_count = 0
    # Send to non-premium users in private chat
    for user_id in all_user_ids:
        if not await is_premium(user_id):
            try:
                await app.send_message(user_id, broadcast_text)
                sent_count += 1
                await asyncio.sleep(0.1) # To avoid flood limits
            except Exception as e:
                print(f"Could not send broadcast to user {user_id}: {e}")
    
    # Send to non-premium groups
    for group_id in all_group_ids:
        group_data = await connected_groups_collection.find_one({'_id': group_id})
        if group_data and not await is_premium(group_data.get('connected_admin_id')):
             try:
                await app.send_message(group_id, broadcast_text)
                sent_count += 1
                await asyncio.sleep(0.1) # To avoid flood limits
             except Exception as e:
                print(f"Could not send broadcast to group {group_id}: {e}")

    await message.reply_text(f"рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рдореИрд╕реЗрдЬ рднреЗрдЬ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ (рдиреЙрди-рдкреНрд░реАрдорд┐рдпрдо рдпреВрдЬрд╝рд░реНрд╕/рдЧреНрд░реБрдкреНрд╕ рдХреЛ)! рдХреБрд▓ {sent_count} рдореИрд╕реЗрдЬ рднреЗрдЬреЗ рдЧрдПред ЁЯШЙ")

@app.on_message(filters.command("connect") & filters.private)
async def connect_group_command(client: Client, message: Message):
    user_id = message.from_user.id
    if not await is_premium(user_id):
        await message.reply_text("рдЧреНрд░реБрдк рдХрдиреЗрдХреНрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдкреНрд░реАрдорд┐рдпрдо рд▓реЗрдирд╛ рд╣реЛрдЧрд╛! ЁЯШЙ")
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.reply_text("рдЧрд▓рдд рдлреЙрд░реНрдореЗрдЯ! `/connect <group_id>` рдпреВрдЬрд╝ рдХрд░реЛ рдирд╛! ЁЯШЙ")
            return
        
        group_id = int(parts[1])
        admin_id = message.from_user.id

        # Verify bot is in the group and user is an admin in that group
        try:
            bot_member = await app.get_chat_member(group_id, app.me.id)
            if bot_member.status == 'left':
                await message.reply_text("рдореИрдВ рдЗрд╕ рдЧреНрд░реБрдк рдореЗрдВ рдирд╣реАрдВ рд╣реВрдБ! рдкрд╣рд▓реЗ рдореБрдЭреЗ рдЧреНрд░реБрдк рдореЗрдВ рдРрдб рдХрд░реЛ рдирд╛! ЁЯе║")
                return
            
            admin_member = await app.get_chat_member(group_id, admin_id)
            if admin_member.status not in ['administrator', 'creator']:
                await message.reply_text("рддреБрдо рдЗрд╕ рдЧреНрд░реБрдк рдХреЗ рдПрдбрдорд┐рди рдирд╣реАрдВ рд╣реЛ! рдореИрдВ рд╕рд┐рд░реНрдлрд╝ рдПрдбрдорд┐рдиреНрд╕ рд╕реЗ рд╣реА рдХрдиреЗрдХреНрдЯ рд╣реЛрддреА рд╣реВрдБ! ЁЯШЙ")
                return

        except Exception as e:
            await message.reply_text(f"рдЧреНрд░реБрдк рдЪреЗрдХ рдХрд░рддреЗ рд╕рдордп рдХреБрдЫ рдЧрдбрд╝рдмрдбрд╝ рд╣реЛ рдЧрдИ рдпрд╛рд░: {e} ЁЯШм")
            return
        
        # Save connection data
        await save_connected_group_settings(group_id, {'connected_admin_id': admin_id, 'settings': {'chat_on': True, 'welcome_message': '', 'rules': '', 'anti_spam': False}})
        await message.reply_text(f"рдЧреНрд░реБрдк `{group_id}` рдХреЛ рдЖрдкрдХреЗ рдЕрдХрд╛рдЙрдВрдЯ рд╕реЗ рдХрдиреЗрдХреНрдЯ рдХрд░ рджрд┐рдпрд╛ рд╣реИ! рдЕрдм рдЖрдк рдЧреНрд░реБрдк рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдПрдХреНрд╕реЗрд╕ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ. ЁЯОЙ", parse_mode="Markdown")
    except ValueError:
        await message.reply_text("рдЕрд░реЗ, group_id рдирдВрдмрд░ рдореЗрдВ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП! ЁЯШд")
    except Exception as e:
        await message.reply_text(f"рдХреБрдЫ рдЧрдбрд╝рдмрдбрд╝ рд╣реЛ рдЧрдИ рдпрд╛рд░: {e} ЁЯШм")


# --- Group Management Commands (Premium Admin Only) ---
@app.on_message(filters.command(["kick", "ban", "mute", "unmute", "warn", "unwarn"]) & filters.group)
async def handle_group_commands(client: Client, message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    # Check if the user is an admin and premium
    try:
        chat_member = await app.get_chat_member(chat_id, user_id)
        if not (chat_member.status in ['administrator', 'creator'] and await is_premium(user_id)):
            await message.reply_text("рдорд╛рдлрд╝ рдХрд░рдирд╛, рдпрд╣ рдХрдорд╛рдВрдб рд╕рд┐рд░реНрдл рдкреНрд░реАрдорд┐рдпрдо рдПрдбрдорд┐рдиреНрд╕ рдХреЗ рд▓рд┐рдП рд╣реИ! ЁЯШЙ")
            return
        
        # Check if bot has necessary permissions
        bot_member = await app.get_chat_member(chat_id, app.me.id)
        if not bot_member.status in ['administrator', 'creator']:
             await message.reply_text("рдореИрдВ рдпрд╣ рдирд╣реАрдВ рдХрд░ рдкрд╛рдКрдБрдЧреА, рдореЗрд░реЗ рдкрд╛рд╕ рдкрд░реНрдпрд╛рдкреНрдд рдкрд░рдорд┐рд╢рди рдирд╣реАрдВ рд╣реИ! рдореБрдЭреЗ рдПрдбрдорд┐рди рдмрдирд╛рдУ рдирд╛! ЁЯе║")
             return

    except Exception as e:
        print(f"Error checking admin/bot status: {e}")
        await message.reply_text("рдХреБрдЫ рдЧрдбрд╝рдмрдбрд╝ рд╣реЛ рдЧрдИ, рдореИрдВ рддреБрдореНрд╣рд╛рд░реА рдПрдбрдорд┐рди рд╕реНрдЯреЗрдЯрд╕ рдЪреЗрдХ рдирд╣реАрдВ рдХрд░ рдкрд╛ рд░рд╣реА! ЁЯШм")
        return

    command = message.text.split()[0].lower()
    target_user = None

    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
    elif len(message.text.split()) > 1:
        # Try to parse user ID from command, or mention
        try:
            target_user_id = int(message.text.split()[1])
            target_user = await app.get_users(target_user_id)
        except ValueError:
            await message.reply_text("рдХрд┐рд╕ рдкрд░ рдХрдорд╛рдВрдб рдЪрд▓рд╛рдиреА рд╣реИ? рдореБрдЭреЗ рдмрддрд╛рдУ рдирд╛! ЁЯд╖тАНтЩАя╕П (рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЛ рдпрд╛ рдпреВрдЬрд╝рд░ ID/рдореЗрдВрд╢рди рджреЛ)")
            return

    if not target_user:
        await message.reply_text("рдХрд┐рд╕ рдкрд░ рдХрдорд╛рдВрдб рдЪрд▓рд╛рдиреА рд╣реИ? рдореБрдЭреЗ рдмрддрд╛рдУ рдирд╛! ЁЯд╖тАНтЩАя╕П (рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЛ рдпрд╛ рдпреВрдЬрд╝рд░ ID/рдореЗрдВрд╢рди рджреЛ)")
        return

    target_user_mention = f"@{target_user.username}" if target_user.username else target_user.first_name

    try:
        if command == '/kick':
            if not bot_member.can_restrict_members:
                await message.reply_text("рдореЗрд░реЗ рдкрд╛рд╕ рдпреВрдЬрд╝рд░реНрд╕ рдХреЛ рдХрд┐рдХ рдХрд░рдиреЗ рдХреА рдкрд░рдорд┐рд╢рди рдирд╣реАрдВ рд╣реИ! ЁЯШе")
                return
            await app.kick_chat_member(chat_id, target_user.id)
            await message.reply_text(f"рдЕрд░реЗ рдЬрд╛рдУ рдирд╛! рдЕрдм рдЖрдкрдХреА рдЬрдЧрд╣ рдирд╣реАрдВ рдпрд╣рд╛рдБ! ЁЯдн {target_user_mention}")
        elif command == '/ban':
            if not bot_member.can_restrict_members:
                await message.reply_text("рдореЗрд░реЗ рдкрд╛рд╕ рдпреВрдЬрд╝рд░реНрд╕ рдХреЛ рдмреИрди рдХрд░рдиреЗ рдХреА рдкрд░рдорд┐рд╢рди рдирд╣реАрдВ рд╣реИ! ЁЯШе")
                return
            await app.ban_chat_member(chat_id, target_user.id)
            await message.reply_text(f"рдЕрдм рдирд╣реАрдВ рдЖ рдкрд╛рдУрдЧреЗ! рд╣рдореЗрд╢рд╛ рдХреЗ рд▓рд┐рдП рдЖрдЙрдЯ! ЁЯЩЕтАНтЩАя╕П {target_user_mention}")
        elif command == '/mute':
            if not bot_member.can_restrict_members:
                await message.reply_text("рдореЗрд░реЗ рдкрд╛рд╕ рдпреВрдЬрд╝рд░реНрд╕ рдХреЛ рдореНрдпреВрдЯ рдХрд░рдиреЗ рдХреА рдкрд░рдорд┐рд╢рди рдирд╣реАрдВ рд╣реИ! ЁЯШе")
                return
            # Mute for 1 hour (3600 seconds)
            await app.restrict_chat_member(chat_id, target_user.id, ChatPermissions(), until_date=int(time.time() + 3600))
            await message.reply_text(f"рдЪреБрдк рд╣реЛ рдЬрд╛рдУ! рдЕрдм рдереЛрдбрд╝рд╛ рдЖрд░рд╛рдо рдХрд░реЛ! ЁЯдл {target_user_mention}")
        elif command == '/unmute':
            if not bot_member.can_restrict_members:
                await message.reply_text("рдореЗрд░реЗ рдкрд╛рд╕ рдпреВрдЬрд╝рд░реНрд╕ рдХреЛ рдЕрдирдореНрдпреВрдЯ рдХрд░рдиреЗ рдХреА рдкрд░рдорд┐рд╢рди рдирд╣реАрдВ рд╣реИ! ЁЯШе")
                return
            await app.restrict_chat_member(chat_id, target_user.id, ChatPermissions(can_send_messages=True, can_send_media_messages=True, can_send_other_messages=True, can_add_web_page_previews=True))
            await message.reply_text(f"рдареАрдХ рд╣реИ! рдЕрдм рддреБрдо рдмреЛрд▓ рд╕рдХрддреЗ рд╣реЛ! ЁЯе│ {target_user_mention}")
        elif command == '/warn':
            # This would involve a 'warnings' counter in database for the user
            await message.reply_text(f"рдЙрдлреНрдл! рдпреЗ рдЧрд▓рдд рдмрд╛рдд рд╣реИ! рдЕрдЧрд▓реА рдмрд╛рд░ рдРрд╕рд╛ рдордд рдХрд░рдирд╛!ЁЯШа {target_user_mention}")
        elif command == '/unwarn':
            # This would involve resetting a 'warnings' counter
            await message.reply_text(f"рдЪрд▓реЛ, рдПрдХ рдЧрд▓рддреА рдорд╛рдлрд╝! ЁЯШЙ {target_user_mention}")
    except Exception as e:
        await message.reply_text(f"рдЕрд░реЗ, рдореИрдВ рдпрд╣ рдирд╣реАрдВ рдХрд░ рдкрд╛рдИ! рд╢рд╛рдпрдж рдореЗрд░реЗ рдкрд╛рд╕ рдкрд░рдорд┐рд╢рди рдирд╣реАрдВ рд╣реИ рдпрд╛ рдХреБрдЫ рдФрд░ рдЧрдбрд╝рдмрдбрд╝ рд╣реИ: {e} ЁЯШе")


# --- Learning and Responding to Messages ---
# Changed ~filters.edited to ~filters.via_bot to fix AttributeError
@app.on_message(filters.text & filters.group & ~filters.via_bot)
async def learn_and_respond(client: Client, message: Message):
    chat_id = message.chat.id
    message_text = message.text.lower()

    # Basic filter: ignore links, mentions, and commands for learning
    message_text_filtered = re.sub(r'http\S+|www\S+|@\S+|/\w+', '', message_text).strip()
    if not message_text_filtered: # If message is empty after filtering or only contained filtered content
        return

    # Get existing learning data for the group
    group_data = await get_group_learning_data(chat_id)
    learning_deque = group_data['phrases']

    # Add message to learning data
    learning_deque.append(message_text_filtered)
    await save_group_learning_data(chat_id, learning_deque)

    # Simplified response generation:
    if random.random() < 0.3: # 30% chance to respond
        sassy_replies = [
            "рд╣рд╛рдБ рдпрд╛рд░!", "рд╕рд╣реА рдХрд╣рд╛! ЁЯШЙ", "рдмрд┐рд▓рдХреБрд▓!", "рдордЬрд╝реЗрджрд╛рд░!", "рдФрд░ рдмрддрд╛рдУ?",
            "рдХреНрдпрд╛ рдмрд╛рдд рд╣реИ!", "рд╣рд╛рд╣рд╛!", "рд╕рдЪ рдореЗрдВ?", "рдареАрдХ рд╣реИ!", "рд╕рд╣реА рдмрд╛рдд! ЁЯСН",
            "рдЕрд░реЗ рд╡рд╛рд╣!", "рдирд╛рдЗрд╕!", "рдХреНрдпреВрдЯ!", "рдХреНрдпрд╛ рдмреЛрд▓ рджрд┐рдпрд╛!", "рдорд╕реНрдд!",
            "рдЙрдлреНрдл!", "рд╕рдордЭ рдЧрдИ! ЁЯдФ", "рдЬреА рдЬреА!", "рдУрдХреЗ! ЁЯСМ"
        ]
        
        chosen_reply = random.choice(sassy_replies) # Default to a generic sassy reply

        # Try to pick a relevant reply from learned data if available
        # This is a very basic attempt. A true learning response would be much more complex.
        if learning_deque:
            # Simple approach: pick a random previous phrase that is short
            short_learned_phrases = [p for p in learning_deque if 1 <= len(p.split()) <= 5]
            if short_learned_phrases:
                chosen_reply = random.choice(short_learned_phrases)
            else:
                chosen_reply = random.choice(sassy_replies) # Fallback if no short phrases learned

        # Simulate sticker usage occasionally
        sticker_ids = [
            'CAACAgIAAxkBAAEX2VNmZm4a2t2192923923923923923923923923923923', # Replace with actual sticker IDs
            'CAACAgIAAxkBAAEX2VNmZm4a2t2192923923923923923923923923923924', # Example sticker
            'CAACAgIAAxkBAAEX2VNmZm4a2t2192923923923923923923923923923925', # Example sticker
            # ... add more sticker IDs that fit the sassy/cute tone
        ]
        
        if random.random() < 0.2 and sticker_ids: # 20% chance for sticker if sticker_ids are available
            await message.reply_sticker(random.choice(sticker_ids))
        else:
            await message.reply_text(chosen_reply)

# --- Ad/Promotion for Non-Premium Users (Randomly) ---
# Changed ~filters.edited to ~filters.via_bot
@app.on_message(filters.text & filters.group & ~filters.via_bot)
async def send_ad_to_non_premium(client: Client, message: Message):
    # Only send ads if the message sender is not premium and there's a 5% chance.
    if not await is_premium(message.from_user.id) and random.random() < 0.05:
        ads = [
            f"рдЕрд░реЗ рдпрд╛рд░, рдпрд╣рд╛рдБ рдХреНрдпреЛрдВ рдмреЛрд░ рд╣реЛ рд░рд╣реЗ рд╣реЛ? рд╣рдорд╛рд░реА рдореВрд╡реА рд╡рд╛рд▓реА рдЧреИрдВрдЧ **[@istreamx]({ISTREAMX_LINK})** рдореЗрдВ рдЖрдУ рдирд╛! рд╡рд╣рд╛рдБ рддреЛ рдзреВрдо рдордЪреА рд╣реИ! ЁЯН┐ЁЯОм",
            f"рдХреНрдпрд╛! рддреБрдореНрд╣реЗрдВ рдкрддрд╛ рдирд╣реАрдВ? рд╕рд╛рд░реЗ рд▓реЗрдЯреЗрд╕реНрдЯ рдЕрдкрдбреЗрдЯреНрд╕ рддреЛ рд╣рдорд╛рд░реЗ **[@asbhai_bsr]({MANDATORY_CHANNEL_LINK})** рдЪреИрдирд▓ рдкрд░ рдорд┐рд▓рддреЗ рд╣реИрдВ! рдЬрд▓реНрджреА рд╕реЗ рдЬреЙрдЗрди рдХрд░ рд▓реЛ! ЁЯПГтАНтЩАя╕ПЁЯТи",
            f"рдкреНрд░реАрдоium рдРрдкреНрд╕ рдЪрд╛рд╣рд┐рдП? рдлрд┐рдХрд░ рдиреЙрдЯ! рд╕реАрдзреЗ **[@aspremiumapps]({ASPREMIUMAPPS_LINK})** рдкрд░ рдЖрдУ рдирд╛! рд╕рдм рдорд┐рд▓реЗрдЧрд╛ рд╡рд╣рд╛рдБ! ЁЯШЙ",
            f"рдЕрдкрдиреА As ki Angel рдХреЛ рдФрд░ рднреА рд╕реНрдорд╛рд░реНрдЯ рдФрд░ рдмрд┐рдирд╛ рдПрдбреНрд╕ рдХреЗ рдЪрд╛рд╣рддреЗ рд╣реЛ? **ЁЯТО рдкреНрд░реАрдорд┐рдпрдо рд▓реЛ рдирд╛!** `/start` рдХрд░рдХреЗ рджреЗрдЦреЛ! ЁЯШЙ"
        ]
        await message.reply_text(random.choice(ads), parse_mode="Markdown")

# --- Keep-Alive Function ---
async def keep_alive():
    """Sends a periodic message to the bot owner to keep the bot active."""
    # Ensure BOT_OWNER_ID is correctly set for this to work
    if str(BOT_OWNER_ID) == 'YOUR_OWNER_ID_HERE':
        print("Keep-alive: BOT_OWNER_ID not set, cannot send messages.")
        return

    while True:
        try:
            # You can change this message or send it to a private log channel
            await app.send_message(BOT_OWNER_ID, "As ki Angel is awake! (Keep-alive ping from Koyeb)")
            print("Keep-alive: Sent message to owner.")
        except Exception as e:
            print(f"Keep-alive failed to send message: {e}")
        await asyncio.sleep(60 * 5) # рд╣рд░ 5 рдорд┐рдирдЯ рдореЗрдВ рдореИрд╕реЗрдЬ рднреЗрдЬреЛ

# --- Start the bot ---
async def main():
    print("As ki Angel bot (Pyrogram) is starting...")
    await app.start()
    print("As ki Angel bot is online!")
    
    # Start the keep-alive task in the background
    asyncio.create_task(keep_alive())
    
    # Keep the bot running indefinitely
    await asyncio.Event().wait() 

if __name__ == "__main__":
    asyncio.run(main())
