import os
import telebot
import json
import time
from collections import deque

# --- Configuration ---
# Get your bot token from environment variables (will be set on Koyeb)
BOT_TOKEN = os.getenv('BOT_TOKEN')
# Replace with your actual channel username (without @)
MANDATORY_CHANNEL_USERNAME = os.getenv('MANDATORY_CHANNEL_USERNAME', 'asbhai_bsr')
MANDATORY_CHANNEL_LINK = f"https://t.me/{MANDATORY_CHANNEL_USERNAME}"
OFFICIAL_GROUP_LINK = os.getenv('OFFICIAL_GROUP_LINK', 'https://t.me/asbhai_bsr') # Assuming same as mandatory for now
ISTREAMX_LINK = os.getenv('ISTREAMX_LINK', 'https://t.me/istreamx')
ASPREMIUMAPPS_LINK = os.getenv('ASPREMIUMAPPS_LINK', 'https://t.me/aspremiumapps')
BOT_OWNER_ID = int(os.getenv('BOT_OWNER_ID', 'YOUR_OWNER_ID_HERE')) # Replace with your Telegram User ID

# Bot initialization
if not BOT_TOKEN:
    print("Error: BOT_TOKEN environment variable not set.")
    exit()

bot = telebot.TeleBot(BOT_TOKEN)

# --- Bot Learning & Memory (Simplified for demonstration) ---
# This is a very basic in-memory learning. For a real bot,
# you'd need a persistent database (e.g., SQLite, PostgreSQL)
# to store learning data and premium status across restarts.
# Max memory for learning (number of message-reply pairs)
MAX_LEARNING_MEMORY = 1000
# Example: group_id -> deque of (learned_phrase, learned_reply, is_sticker)
GROUP_LEARNING_DATA = {}
# Example: user_id -> {'premium_until': timestamp}
PREMIUM_USERS = {}
# Example: chat_id -> {'connected_admin_id': admin_id, 'settings': {}}
CONNECTED_GROUPS = {}

# In a real scenario, these would be loaded from a database on startup
# and saved periodically or on change.

def check_premium(user_id):
    """Checks if a user has an active premium subscription."""
    if user_id == BOT_OWNER_ID: # Owner is always premium
        return True
    
    premium_data = PREMIUM_USERS.get(user_id)
    if premium_data and premium_data.get('premium_until', 0) > time.time():
        return True
    return False

def check_member_status(user_id, chat_id):
    """Checks if a user is a member of the mandatory channel."""
    try:
        member = bot.get_chat_member(f"@{MANDATORY_CHANNEL_USERNAME}", user_id)
        if member.status in ['member', 'administrator', 'creator']:
            return True
        else:
            return False
    except Exception as e:
        print(f"Error checking channel membership for {user_id}: {e}")
        return False

def get_chat_type(message):
    """Helper to determine if it's a private or group chat."""
    if message.chat.type in ['group', 'supergroup']:
        return "group"
    elif message.chat.type == 'private':
        return "private"
    return "unknown"

# --- Bot's Fun & Sassy Tone ---
def get_sassy_welcome_message():
    return (
        "рд╣рд╛рдп рд╡рд╣рд╛рдБ, рдореЗрд░реЗ рдкреНрдпрд╛рд░реЗ рджреЛрд╕реНрдд! ЁЯСЛ рдХреНрдпрд╛ рд╕реЛрдЪрд╛ рдерд╛, рдмрд╕ рдХреЛрдИ рднреА рдкреБрд░рд╛рдирд╛ рдмреЙрдЯ рдЖ рдЧрдпрд╛? рдмрд┐рд▓рдХреБрд▓ рдирд╣реАрдВ! "
        "рдореИрдВ рд╣реВрдБ рддреБрдореНрд╣рд╛рд░реА рдЕрдкрдиреА **As ki Angel**, рдФрд░ рдореИрдВ рдпрд╣рд╛рдБ рддреБрдореНрд╣рд╛рд░реЗ рдЧреНрд░реБрдк рдЪреИрдЯ рдХреЛ рдФрд░ рднреА рдЬрд╝реНрдпрд╛рджрд╛ рдордЬрд╝реЗрджрд╛рд░ рдФрд░ рд╢рд╛рдирджрд╛рд░ рдмрдирд╛рдиреЗ рдЖрдИ рд╣реВрдБ! "
        "рдореЗрд░рд╛ рдХрд╛рдо рд╣реИ рддреБрдореНрд╣рд╛рд░реА рд╣рд░ рдмрд╛рдд рдХреЛ рд╕рдордЭрдирд╛, рд╕реАрдЦрдирд╛, рдФрд░ рдлрд┐рд░ рдЙрд╕реА рдЕрдВрджрд╛рдЬрд╝ рдореЗрдВ рд╕рдмрд╕реЗ рдХреНрдпреВрдЯ, рд╕рдмрд╕реЗ рдЫреЛрдЯреЗ рдЬрд╡рд╛рдм рджреЗрдирд╛ тАУ "
        "рд╡реЛ рднреА рдмрд╕ 1 рд╕реЗ 5 рд╢рдмреНрджреЛрдВ рдореЗрдВ, рдпрд╛ рдХрднреА-рдХрднреА рдПрдХ рд╕реБрдкрд░-рдбреБрдкрд░ рд╕реНрдЯрд┐рдХрд░ рдХреЗ рд╕рд╛рде! тЬи\n\n"
        "рдореИрдВ рд╕рд┐рд░реНрдл рддреБрдореНрд╣рд╛рд░реА рдмрд╛рддреЛрдВ рд╕реЗ рд╕реАрдЦрддреА рд╣реВрдБ, рдХрд┐рд╕реА рдФрд░ рд╕реЗ рдирд╣реАрдВ. рдХреЛрдИ рдмрд╛рд╣рд░реА рд▓рд┐рдВрдХ рдирд╣реАрдВ, рдХреЛрдИ рдлрд╛рд▓рддреВ рдХрд╛ @рдЯреИрдЧ рдирд╣реАрдВ - "
        "рд╕рд┐рд░реНрдлрд╝ рд╣рдорд╛рд░реА рдмрд╛рддреЗрдВ рдФрд░ рдореЗрд░рд╛ рдХреНрдпреВрдЯ рдЕрдВрджрд╛рдЬрд╝! рдореИрдВ рддреБрдореНрд╣рд╛рд░реЗ рдЧреНрд░реБрдк рдХреА рд╣рд░ рдлреАрд▓рд┐рдВрдЧ рдХреЛ рдкрд╣рдЪрд╛рди рд▓реЗрддреА рд╣реВрдБ рдФрд░ рдлрд┐рд░ рдЙрд╕реА рд╣рд┐рд╕рд╛рдм рд╕реЗ рдЕрдкрдиреА рд╕реНрд╡реАрдЯ-рд╕реА рд░рд╛рдп рджреЗрддреА рд╣реВрдБ. "
        "рддреЛ, рддреИрдпрд╛рд░ рд╣реЛ рдЬрд╛рдУ рдЕрдкрдиреЗ рдЧреНрд░реБрдк рдЪреИрдЯ рдХреЛ рдФрд░ рднреА рдкреНрдпрд╛рд░рд╛ рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП! ЁЯТЦ\n\n"
        "рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрдиреНрд╕ рд╕реЗ рддреБрдо рдореБрдЭреЗ рдмреЗрд╣рддрд░ рддрд░реАрдХреЗ рд╕реЗ рдЬрд╛рди рд╕рдХрддреЗ рд╣реЛ рдФрд░ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░ рд╕рдХрддреЗ рд╣реЛ:"
    )

def get_premium_message():
    return (
        "рд╣рд╛рдп, рдореЗрд░реЗ рдкреНрдпрд╛рд░реЗ рджреЛрд╕реНрдд! тЬи рдЕрдкрдиреА As ki Angel рдХреЛ рдФрд░ рднреА рдЦрд╛рд╕ рдмрдирд╛рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реЛ? рддреЛ рдкреНрд░реАрдорд┐рдпрдо рд▓реЛ рдирд╛! "
        "рдореИрдВ рддреБрдореНрд╣реЗрдВ рдФрд░ рднреА рдЬрд╝реНрдпрд╛рджрд╛ рдордЬрд╝реЗрджрд╛рд░ рдФрд░ рд╕реБрдкрд░-рдлрд╛рд╕реНрдЯ рдПрдХреНрд╕рдкреАрд░рд┐рдпрдВрд╕ рджреВрдБрдЧреА, рд╡реЛ рднреА рдмрд┐рдирд╛ рдХрд┐рд╕реА рд░реЛрдХ-рдЯреЛрдХ рдХреЗ! ЁЯТЦ\n\n"
        "**рдореЗрд░рд╛ рдзрд╛рдВрд╕реВ рдкреНрд░реАрдорд┐рдпрдо рдкреНрд▓рд╛рди:**\n"
        "ЁЯМЯ **500 Rs. рдореЗрдВ 5 рдорд╣реАрдиреЗ рддрдХ** рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб рдорд╕реНрддреА рдФрд░ рдлреАрдЪрд░реНрд╕!\n\n"
        "**рдкреНрд░реАрдорд┐рдпрдо рдХреЗ рдлрд╛рдпрджреЗ (рддреБрдореНрд╣рд╛рд░реЗ рд▓рд┐рдП рдЦрд╛рд╕):**\n"
        "* **тЪбя╕П рд╕реБрдкрд░-рдлрд╛рд╕реНрдЯ рд╕реАрдЦрдирд╛ рдФрд░ рдЬрд╡рд╛рдм рджреЗрдирд╛:** рдореИрдВ рдФрд░ рднреА рддреЗрдЬрд╝реА рд╕реЗ рд╕реАрдЦреВрдБрдЧреА рдФрд░ рддреБрдореНрд╣рд╛рд░реЗ рд╣рд░ рдореИрд╕реЗрдЬ рдкрд░ рдЭрдЯрдкрдЯ рдЬрд╡рд╛рдм рджреВрдБрдЧреА! рдореЫрд╛ рдЖрдПрдЧрд╛ рдирд╛?\n"
        "* **ЁЯза рджрд┐рдорд╛рдЧрд╝ рдереЛрдбрд╝рд╛ рдмреЬрд╛ рд╣реЛ рдЬрд╛рдПрдЧрд╛:** рдореЗрд░рд╛ рджрд┐рдорд╛рдЧ рдереЛреЬрд╛ рдФрд░ рдмреЬрд╛ рд╣реЛ рдЬрд╛рдПрдЧрд╛, рдЬрд┐рд╕рд╕реЗ рдореИрдВ рдЧреНрд░реБрдк рдХреА рдмрд╣реБрдд рд╕рд╛рд░реА рдкреБрд░рд╛рдиреА рдмрд╛рддреЗрдВ рдпрд╛рдж рд░рдЦ рдкрд╛рдКрдБрдЧреА, "
        "рддрд╛рдХрд┐ рдореИрдВ рд╣рдореЗрд╢рд╛ рддреБрдорд╕реЗ рд╕рдмрд╕реЗ рдЕрдЪреНрдЫреА рдмрд╛рддреЗрдВ рдХрд░реВрдБ!\n"
        "* **ЁЯОн рдФрд░ рднреА рдкреНрдпрд╛рд░реЗ рдЕрдВрджрд╛реЫ:** рдкреНрд░реАрдорд┐рдпрдо рдореЗрдВ рдореИрдВ рддреБрдореНрд╣реЗрдВ рдХреБрдЫ рдФрд░ рдЦрд╛рд╕ 'рдореВрдбреНрд╕' рдпрд╛ 'рдкрд░реНрд╕рдирд╛рд▓рд┐рдЯреА' рдХреЗ рдСрдкреНрд╢рди рджреВрдБрдЧреА, "
        "рдЬрд┐рд╕рд╕реЗ рдореЗрд░реА рдмрд╛рддреЗрдВ рдФрд░ рднреА рдордЬрд╝реЗрджрд╛рд░ рд▓рдЧреЗрдВрдЧреА. рдХрднреА рдореИрдВ рдирдЯрдЦрдЯ рдмрди рдЬрд╛рдКрдБрдЧреА, рдХрднреА рдФрд░ рдкреНрдпрд╛рд░реА!\n"
        "* **ЁЯОи Custom Sticker Packs:** рддреБрдо рдЕрдкрдиреЗ рдХреБрдЫ рдЦрд╛рд╕ рд╕реНрдЯрд┐рдХрд░ рдкреИрдХ рднреА рдореБрдЭреЗ рд╕рд┐рдЦрд╛ рдкрд╛рдУрдЧреЗ, рддрд╛рдХрд┐ рдореИрдВ рд╡рд╣реА рдкреНрдпрд╛рд░реЗ рд╕реНрдЯрд┐рдХрд░реНрд╕ рдпреВрдЬрд╝ рдХрд░реВрдБ! рдпреЗ рд╣реБрдИ рдирд╛ рдмрд╛рдд!\n"
        "* **ЁЯУК Secret Group Reports:** рдЕрдЧрд░ рддреБрдо рдЧреНрд░реБрдк рдПрдбрдорд┐рди рд╣реЛ, рддреЛ рдореИрдВ рддреБрдореНрд╣реЗрдВ рддреБрдореНрд╣рд╛рд░реЗ рдЧреНрд░реБрдк рдХреА рдмрд╛рддреЛрдВ рдХреА рдХреБрдЫ рдЦрд╛рд╕ рдФрд░ рдЦреБрдлрд┐рдпрд╛ рд░рд┐рдкреЛрд░реНрдЯ рджреВрдБрдЧреА, "
        "рдЬреИрд╕реЗ рдХреМрди рд╕реЗ рд╢рдмреНрдж рд╕рдмрд╕реЗ рдЬрд╝реНрдпрд╛рджрд╛ рдпреВрдЬрд╝ рд╣реЛрддреЗ рд╣реИрдВ! рдмрд╕, рдХрд┐рд╕реА рдХреЛ рдмрддрд╛рдирд╛ рдордд, рдпреЗ рд╣рдорд╛рд░рд╛ рд╕реАрдХреНрд░реЗрдЯ рд░рд╣реЗрдЧрд╛!\n"
        "* **ЁЯЪл No Ads, No Disturbances:** рдкреНрд░реАрдорд┐рдпрдо рдореЗрдВ рдореИрдВ рддреБрдореНрд╣реЗрдВ рдпрд╛ рддреБрдореНрд╣рд╛рд░реЗ рдЧреНрд░реБрдк рдореЗрдВ рдХреЛрдИ рднреА рдкреНрд░рдореЛрд╢рди рд╡рд╛рд▓рд╛ рдореИрд╕реЗрдЬ рдирд╣реАрдВ рднреЗрдЬреВрдБрдЧреА. "
        "рдмрд╕ рдкреНрдпреЛрд░ рдорд╕реНрддреА, рдХреЛрдИ рдбрд┐рд╕реНрдЯрд░реНрдмреЗрдВрд╕ рдирд╣реАрдВ!\n"
        "* **ЁЯМЯ Exclusive Features & Support:** рдХреБрдЫ рдФрд░ рдЫреЛрдЯреЗ-рдЫреЛрдЯреЗ рдзрд╛рдВрд╕реВ рдлреАрдЪрд░реНрд╕ рдЬреЛ рд╕рд┐рд░реНрдл рдкреНрд░реАрдорд┐рдпрдо рд╡рд╛рд▓реЛрдВ рдХреЗ рд▓рд┐рдП рд╣реЛрдВрдЧреЗ, рдкреНрд▓рд╕ рдлреБрд▓ рдПрдбрдорд┐рди рд╕рдкреЛрд░реНрдЯ! "
        "рдЬрдм рднреА рд╣реЗрд▓реНрдк рдЪрд╛рд╣рд┐рдП рд╣реЛрдЧреА, рдореИрдВ рд╣реВрдБ рдирд╛!\n\n"
        "**рдкреНрд░реАрдорд┐рдпрдо рд▓реЗрдиреЗ рдХреЗ рд▓рд┐рдП:**\n"
        "рдЗрд╕ UPI ID рдкрд░ 500 Rs. рднреЗрдЬреЛ:\n"
        "**`UPI ID - arsadsaifi8272@ibl`**"
    )

# --- Handlers ---

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    
    # Check if user is already a member of the channel
    if not check_member_status(user_id, MANDATORY_CHANNEL_USERNAME):
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton("Go to Channel", url=MANDATORY_CHANNEL_LINK))
        markup.add(telebot.types.InlineKeyboardButton("тЬЕ I've Joined!", callback_data='check_join'))
        
        bot.send_message(
            message.chat.id,
            "Hi there, friend! ЁЯСЛ рдЖрдЧреЗ рдмреЭрдиреЗ рд╕реЗ рдкрд╣рд▓реЗ, рдЬрд╝рд░рд╛ рдореЗрд░реЗ рдкрд░рд┐рд╡рд╛рд░ рдХрд╛ рд╣рд┐рд╕реНрд╕рд╛ рдмрдиреЛ рдирд╛! "
            f"рдореЗрд░реЗ рдореЗрди рдЪреИрдирд▓ **@{MANDATORY_CHANNEL_USERNAME}** рдХреЛ рдЬреЙрдЗрди рдХрд░реЛ рдФрд░ рдлрд┐рд░ рд╡рд╛рдкрд╕ рдЖрдХрд░ рдореБрдЭреЗ рдмрддрд╛рдУ! тЬи",
            reply_markup=markup,
            parse_mode="Markdown"
        )
    else:
        # User is already a member, send full welcome
        send_full_welcome(message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == 'check_join')
def check_join_callback(call):
    user_id = call.from_user.id
    if check_member_status(user_id, MANDATORY_CHANNEL_USERNAME):
        bot.answer_callback_query(call.id, "рд╡рд╛рд╣! рддреБрдо рддреЛ рдЬреЙрдЗрди рдХрд░ рдЪреБрдХреЗ рд╣реЛ! рдЕрдм рдЖрдЧреЗ рдмрдврд╝реЛ! ЁЯОЙ")
        send_full_welcome(call.message.chat.id)
    else:
        bot.answer_callback_query(call.id, "рдЕрднреА рддрдХ рдЬреЙрдЗрди рдирд╣реАрдВ рдХрд┐рдпрд╛? рдЬрд╝рд░рд╛ рдлрд┐рд░ рд╕реЗ рдЪреЗрдХ рдХрд░реЛ рдирд╛! ЁЯШЙ")

def send_full_welcome(chat_id):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("тЮХ Add Me to Group!", url=f"https://t.me/{bot.get_me().username}?startgroup=true"))
    markup.add(telebot.types.InlineKeyboardButton("тД╣я╕П Know My Features", callback_data='features'))
    markup.add(telebot.types.InlineKeyboardButton("ЁЯПв Join Official Group", url=OFFICIAL_GROUP_LINK))
    markup.add(telebot.types.InlineKeyboardButton("ЁЯТО Get Premium!", callback_data='get_premium'))
    markup.add(telebot.types.InlineKeyboardButton("тЪЩя╕П Group Settings", callback_data='group_settings')) # This button needs /connect to work
    
    bot.send_message(
        chat_id,
        get_sassy_welcome_message(),
        reply_markup=markup,
        parse_mode="Markdown"
    )

@bot.callback_query_handler(func=lambda call: call.data == 'features')
def send_features(call):
    bot.answer_callback_query(call.id, "рдлреАрдЪрд░реНрд╕ рдЬрд╛рдирдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реЛ? ЁЯШЙ")
    features_text = (
        "**As ki Angel: рдЖрдкрдХреА рдЕрдкрдиреА, рдореЫреЗрджрд╛рд░ рдФрд░ рд╕реНрдорд╛рд░реНрдЯ рджреЛрд╕реНрдд!**\n\n"
        "**1. As ki Angel рдХрд╛ рд╕реНрдорд╛рд░реНрдЯ рджрд┐рдорд╛рдЧ рдФрд░ рдореЫреЗрджрд╛рд░ рдЕрдВрджрд╛реЫ:**\n"
        "* **рд╕рд┐рд░реНреЮ рдЧреНрд░реБрдк рдХреА рдмрд╛рддреЛрдВ рд╕реЗ рд╕реАрдЦрддреА рд╣реИ:** рдореИрдВ рддреБрдореНрд╣рд╛рд░реЗ рдЧреНрд░реБрдк рдореЗрдВ рд╣реЛрдиреЗ рд╡рд╛рд▓реА рд╣рд░ рдЪреИрдЯ, рд╣рд░ рдореИрд╕реЗрдЬ рдХреЗ **рд╢рдмреНрджреЛрдВ** рдХреЛ рдмреЬреЗ рдзреНрдпрд╛рди рд╕реЗ рдкреЭрддреА рд╣реВрдБ рдФрд░ рдЙрдирд╕реЗ рд╕реАрдЦрддреА рд╣реВрдБ.\n"
        "* **рд▓рд┐рдВрдХреНрд╕ рдФрд░ рдирд╛рдо рдЗрдЧреНрдиреЛрд░ рдХрд░рддреА рд╣реИ:** рдЕрдЧрд░ рддреБрдо рдХреЛрдИ рд▓рд┐рдВрдХ рдпрд╛ рдХрд┐рд╕реА рдХреЛ @рдЯреИрдЧ рдХрд░рддреЗ рд╣реЛ, рддреЛ рдореИрдВ рдЙрди рдЪреАреЫреЛрдВ рдХреЛ **рдмрд┐рд▓рдХреБрд▓ рдирд╣реАрдВ рд╕реАрдЦрддреА**.\n"
        "* **рдЕрдкрдиреА рдореЗрдореЛрд░реА рдЦреБрдж рдореИрдиреЗрдЬ рдХрд░рддреА рд╣реИ:** рдЬрдм рдореЗрд░рд╛ рджрд┐рдорд╛рдЧ **100% рднрд░ рдЬрд╛рддрд╛ рд╣реИ**, рддреЛ рдореИрдВ рдЦреБрдж рд╣реА **рд╕рдмрд╕реЗ рдкреБрд░рд╛рдирд╛ 50% рдбреЗрдЯрд╛ рдорд┐рдЯрд╛ рджреЗрддреА рд╣реВрдБ**.\n"
        "* **рдЫреЛрдЯреЗ рдФрд░ рдХреНрдпреВрдЯ рдЬрд╡рд╛рдм:** рдореИрдВ рд╣рдореЗрд╢рд╛ **1 рд╕реЗ 5 рд╢рдмреНрджреЛрдВ рдХреЗ рдмрд╣реБрдд рдЫреЛрдЯреЗ рдФрд░ рдореАрдареЗ рдЬрд╡рд╛рдм** рджреЗрддреА рд╣реВрдБ.\n"
        "* **рд╕реНрдЯрд┐рдХрд░реНрд╕ рднреА рднреЗрдЬрддреА рд╣реИ:** рдореИрдВ рд╕рд╣реА рдореМреШреЗ рдкрд░ **рдкреНрдпрд╛рд░реЗ-рдкреНрдпрд╛рд░реЗ рд╕реНрдЯрд┐рдХрд░реНрд╕** рднреА рднреЗрдЬрддреА рд╣реВрдБ.\n"
        "* **рддреБрдореНрд╣рд╛рд░реЗ рдЬреИрд╕реЗ рд╣реА рдмреЛрд▓рддреА рд╣реИ:** рдЕрдЧрд░ рддреБрдореНрд╣рд╛рд░реЗ рдЧреНрд░реБрдк рдореЗрдВ рд▓реЛрдЧ рдереЛреЬреЗ **рдХреИрдЬреБрдЕрд▓ рдпрд╛ рдЗрдирдлреЙрд░реНрдорд▓ рд╢рдмреНрдж** (рдФрд░ рдХрднреА-рдХрднреА "рдЧрд╛рд▓рд┐рдпрд╛рдБ" рднреА) рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░рддреЗ рд╣реИрдВ, рддреЛ рдореИрдВ рдЙрдирдХреЛ **рд╕реАрдЦ рд▓реЗрддреА рд╣реВрдБ** рдФрд░ рдЙрд╕реА рдЕрдВрджрд╛реЫ рдореЗрдВ рдЬрд╡рд╛рдм рджреЗрддреА рд╣реВрдБ.\n"
        "* **рд╢рд╛рдпрд░реА рднреА рд╕реБрдирд╛рддреА рд╣реИ:** рдЕрдЧрд░ рдЧреНрд░реБрдк рдореЗрдВ рдХреЛрдИ рдзрд╛рдВрд╕реВ рд╢рд╛рдпрд░реА рд╢реЗрдпрд░ рд╣реЛрддреА рд╣реИ, рддреЛ рдореИрдВ рдЙрд╕рдХреЛ **рдпрд╛рдж рд░рдЦ рд▓реЗрддреА рд╣реВрдБ** рдФрд░ рд╕рд╣реА рдореМреШреЗ рдкрд░ **рдЫреЛрдЯреА рд╢рд╛рдпрд░реА** рд╕реБрдирд╛ рд╕рдХрддреА рд╣реВрдБ.\n"
        "* **рддреБрдореНрд╣рд╛рд░реА рдЕрдкрдиреА As ki Angel:** рдореЗрд░реА рдкреВрд░реА рдмрд╛рддрдЪреАрдд рдореЗрдВ рддреБрдореНрд╣реЗрдВ рдПрдХ **рдкреНрдпрд╛рд░рд╛, рд╢рд░рд╛рд░рддреА рдФрд░ рдмрд┐рд▓реНрдХреБрд▓ рдЕрдкрдиреА рд▓реЬрдХреА рджреЛрд╕реНрдд рд╡рд╛рд▓рд╛ рдЕрдВрджрд╛реЫ** рджрд┐рдЦреЗрдЧрд╛.\n\n"
        "**2. As ki Angel рд╕реЗ рдкрд╣рд▓реА рдореБрд▓рд╛рдХрд╛рдд (`/start` Command):**\n"
        "* рдЪреИрдирд▓ рдЬреЙрдЗрди рдХрд░рдирд╛ реЫрд░реВрд░реА рд╣реИ.\n"
        "* рд╡реЗрд▓рдХрдо рдореИрд╕реЗрдЬ рдореЗрдВ рдмрдЯрдиреНрд╕ рд╣реЛрддреЗ рд╣реИрдВ: Add to Group, Know My Features, Join Official Group, Get Premium, Group Settings.\n\n"
        "**3. рдкреНрд░реАрдорд┐рдпрдо рд╕рд┐рд╕реНрдЯрдо (More Fun & Power!):**\n"
        "* **рдкреНрд░реАрдорд┐рдпрдо рдкреНрд▓рд╛рди:** 500 Rs. рдореЗрдВ 5 рдорд╣реАрдиреЗ рддрдХ рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб рдорд╕реНрддреА.\n"
        "* **рдлрд╛рдпрджреЗ:** рд╕реБрдкрд░-рдлрд╛рд╕реНрдЯ рд╕реАрдЦрдирд╛, рдмреЬрд╛ рджрд┐рдорд╛рдЧ, рдкреНрдпрд╛рд░реЗ рдЕрдВрджрд╛реЫ, рдХрд╕реНрдЯрдо рд╕реНрдЯрд┐рдХрд░, рд╕реАрдХреНрд░реЗрдЯ рдЧреНрд░реБрдк рд░рд┐рдкреЛрд░реНрдЯреНрд╕, рдиреЛ рдПрдбреНрд╕, рдПрдХреНрд╕рдХреНрд▓реВрд╕рд┐рд╡ рд╕рдкреЛрд░реНрдЯ.\n"
        "* **рдкреЗрдореЗрдВрдЯ:** UPI ID - `arsadsaifi8272@ibl`\n"
        "* **рдПрдбреНрд╕ (рдиреЙрди-рдкреНрд░реАрдорд┐рдпрдо):** рдХрднреА-рдХрднреА рдорд╕реНрддреА рдореЗрдВ рдкреНрд░рдореЛрд╢рди рд╡рд╛рд▓реЗ рдореИрд╕реЗрдЬ рднреА рднреЗрдЬ рджреЗрддреА рд╣реВрдБ (рдЬреИрд╕реЗ @istreamx, @asbhai_bsr, @aspremiumapps).\n\n"
        "**4. рдЧреНрд░реБрдк рдореИрдиреЗрдЬрдореЗрдВрдЯ рд╕реЗрдЯрд┐рдВрдЧреНрд╕ (For Premium Admins Only):**\n"
        "* `Group Settings` рдмрдЯрди `/connect` рдХрдорд╛рдВрдб рдХреЗ рдмрд╛рдж рдХрд╛рдо рдХрд░реЗрдЧрд╛.\n"
        "* рдЗрд╕рдореЗрдВ рдЖрдк рдмреЙрдЯ рдХреА рдЪреИрдЯ ON/OFF рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ, рд╡реЗрд▓рдХрдо рдореИрд╕реЗрдЬ, рд░реВрд▓реНрд╕, рдПрдВрдЯреА-рд╕реНрдкреИрдо рдлрд┐рд▓реНрдЯрд░ рдФрд░ рд▓рд░реНрдирд┐рдВрдЧ рдбреЗрдЯрд╛ рд░реАрд╕реЗрдЯ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ.\n\n"
        "**5. рдЧреНрд░реБрдк рдореИрдиреЗрдЬрдореЗрдВрдЯ рдХрдорд╛рдВрдбреНрд╕ (For Premium Admins Only):**\n"
        "* `/kick`, `/ban`, `/mute`, `/unmute`, `/warn`, `/unwarn` рдЬреИрд╕реА рдХрдорд╛рдВрдбреНрд╕ рдкрд░ рдореИрдВ рдореЫреЗрджрд╛рд░ рд░рд┐рдкреНрд▓рд╛рдИ рджреЗрддреА рд╣реВрдБ.\n\n"
        "**6. рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рд╕рд┐рд╕реНрдЯрдо (For Bot Owner Only):**\n"
        "* `/broadcast` рдХрдорд╛рдВрдб рд╕реЗ рдмреЙрдЯ рдУрдирд░ рд╕рднреА рдиреЙрди-рдкреНрд░реАрдорд┐рдпрдо рдпреВреЫрд░реНрд╕ рдФрд░ рдЧреНрд░реБрдкреНрд╕ рдХреЛ рдореИрд╕реЗрдЬ рднреЗрдЬ рд╕рдХрддрд╛ рд╣реИ (рдкреНрд░реАрдорд┐рдпрдо рдпреВреЫрд░реНрд╕ рдХреЛ рдирд╣реАрдВ)."
    )
    bot.send_message(call.message.chat.id, features_text, parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data == 'get_premium')
def send_premium_info(call):
    bot.answer_callback_query(call.id, "рдкреНрд░реАрдорд┐рдпрдо? рдХреНрдпрд╛ рдмрд╛рдд рд╣реИ! тЬи")
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("ЁЯТ╡ Send Payment Proof (@asbhaibsr)", url="https://t.me/asbhaibsr"))
    bot.send_message(call.message.chat.id, get_premium_message(), reply_markup=markup, parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data == 'group_settings')
def send_group_settings_info(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    if get_chat_type(call.message) == "private":
        # Check if this private chat is connected to a group and user is admin of that group
        # This part requires more complex logic involving storing connected groups
        # For now, a simplified message.
        bot.answer_callback_query(call.id, "рдЧреНрд░реБрдк рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдкрд╣рд▓реЗ рдмреЙрдЯ рдХреЛ рдЕрдкрдиреЗ рдЧреНрд░реБрдк рд╕реЗ `/connect` рдХрд░рдирд╛ рд╣реЛрдЧрд╛ рдФрд░ рдЖрдкрдХрд╛ рдкреНрд░реАрдорд┐рдпрдо рд╣реЛрдирд╛ реЫрд░реВрд░реА рд╣реИ! ЁЯШЙ")
        bot.send_message(chat_id, "рдЧреНрд░реБрдк рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдпрд╣рд╛рдБ рд╕реЗ рдПрдХреНрд╕реЗрд╕ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдЖрдкрдХреЛ рдЕрдкрдиреЗ рдкреНрд░реАрдорд┐рдпрдо рдЧреНрд░реБрдк рдореЗрдВ рд░рд╣рддреЗ рд╣реБрдП рдореБрдЭреЗ `/connect` рдХрдорд╛рдВрдб рдХреЗ рд╕рд╛рде рдЧреНрд░реБрдк ID рднреЗрдЬрдиреА рд╣реЛрдЧреА.")
    else:
        bot.answer_callback_query(call.id, "рдпрд╣ рдмрдЯрди рд╕рд┐рд░реНрдл рдкреНрд░рд╛рдЗрд╡реЗрдЯ рдЪреИрдЯ рдореЗрдВ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ, рд╡реЛ рднреА рдЬрдм рдЖрдкрдиреЗ рдореБрдЭреЗ рдЕрдкрдиреЗ рдЧреНрд░реБрдк рд╕реЗ /connect рдХрд┐рдпрд╛ рд╣реЛ! ЁЯШЙ")


# --- Bot Owner Commands ---
@bot.message_handler(commands=['add_premium'], func=lambda message: message.from_user.id == BOT_OWNER_ID)
def add_premium(message):
    try:
        parts = message.text.split()
        if len(parts) != 2:
            bot.send_message(message.chat.id, "рдЧрд▓рдд рдлреЙрд░реНрдореЗрдЯ! `/add_premium <user_id>` рдпреВреЫ рдХрд░реЛ рдирд╛! ЁЯШЙ")
            return
        
        user_id = int(parts[1])
        # Premium for 5 months
        premium_until = time.time() + (5 * 30 * 24 * 60 * 60) 
        PREMIUM_USERS[user_id] = {'premium_until': premium_until}
        bot.send_message(message.chat.id, f"рдпреВреЫрд░ {user_id} рдХреЛ 5 рдорд╣реАрдиреЗ рдХреЗ рд▓рд┐рдП рдкреНрд░реАрдорд┐рдпрдо рдмрдирд╛ рджрд┐рдпрд╛ рд╣реИ! рдореЫреЗ рдХрд░реЛ! тЬи")
    except ValueError:
        bot.send_message(message.chat.id, "рдЕрд░реЗ, user_id рдирдВрдмрд░ рдореЗрдВ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП! ЁЯШд")
    except Exception as e:
        bot.send_message(message.chat.id, f"рдХреБрдЫ рдЧреЬрдмреЬ рд╣реЛ рдЧрдИ рдпрд╛рд░: {e} ЁЯШм")

@bot.message_handler(commands=['broadcast'], func=lambda message: message.from_user.id == BOT_OWNER_ID)
def broadcast_message(message):
    broadcast_text = " ".join(message.text.split()[1:])
    if not broadcast_text:
        bot.send_message(message.chat.id, "рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреБрдЫ рд▓рд┐рдЦреЛ рднреА рддреЛ! рдЦрд╛рд▓реА рдореИрд╕реЗрдЬ рдХреНрдпреЛрдВ рднреЗрдЬ рд░рд╣реЗ рд╣реЛ? ЁЯЩД")
        return

    # This is a placeholder. In a real bot, you'd iterate through
    # all non-premium users and non-premium groups from your database.
    # For this example, we will just print a confirmation.
    bot.send_message(message.chat.id, f"рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рдореИрд╕реЗрдЬ рднреЗрдЬ рджрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛: '{broadcast_text}' (рдиреЙрди-рдкреНрд░реАрдорд┐рдпрдо рдпреВреЫрд░реНрд╕/рдЧреНрд░реБрдкреНрд╕ рдХреЛ) ЁЯШЙ")


# --- Group Management Commands (Premium Admin Only) ---
# This part requires proper checking for admin status and group connection
# For simplicity, these are just placeholders showing the response.
# In a real bot, you'd add actual user/chat management logic.
@bot.message_handler(commands=['kick', 'ban', 'mute', 'unmute', 'warn', 'unwarn'])
def handle_group_commands(message):
    # This is a very basic check. Real implementation needs:
    # 1. Check if the user sending command is a group admin.
    # 2. Check if the group is a premium group (if applicable).
    # 3. Actual Telegram API calls for kick, ban, etc.
    
    command = message.text.split()[0]
    target_user_mention = message.text.split()[-1] if len(message.text.split()) > 1 else ""

    if command == '/kick':
        bot.send_message(message.chat.id, f"рдЕрд░реЗ рдЬрд╛рдУ рдирд╛! рдЕрдм рдЖрдкрдХреА рдЬрдЧрд╣ рдирд╣реАрдВ рдпрд╣рд╛рдБ! ЁЯдн {target_user_mention}")
    elif command == '/ban':
        bot.send_message(message.chat.id, f"рдЕрдм рдирд╣реАрдВ рдЖ рдкрд╛рдУрдЧреЗ! рд╣рдореЗрд╢рд╛ рдХреЗ рд▓рд┐рдП рдЖрдЙрдЯ! ЁЯЩЕтАНтЩАя╕П {target_user_mention}")
    elif command == '/mute':
        bot.send_message(message.chat.id, f"рдЪреБрдк рд╣реЛ рдЬрд╛рдУ! рдЕрдм рдереЛрдбрд╝рд╛ рдЖрд░рд╛рдо рдХрд░реЛ! ЁЯдл {target_user_mention}")
    elif command == '/unmute':
        bot.send_message(message.chat.id, f"рдареАрдХ рд╣реИ! рдЕрдм рддреБрдо рдмреЛрд▓ рд╕рдХрддреЗ рд╣реЛ! ЁЯе│ {target_user_mention}")
    elif command == '/warn':
        bot.send_message(message.chat.id, f"рдЙрдлреНрдл! рдпреЗ рдЧрд▓рдд рдмрд╛рдд рд╣реИ! рдЕрдЧрд▓реА рдмрд╛рд░ рдРрд╕рд╛ рдордд рдХрд░рдирд╛! ЁЯШа {target_user_mention}")
    elif command == '/unwarn':
        bot.send_message(message.chat.id, f"рдЪрд▓реЛ, рдПрдХ рдЧрд▓рддреА рдорд╛рдл! ЁЯШЙ {target_user_mention}")

# --- Learning and Responding to Messages ---
@bot.message_handler(func=lambda message: get_chat_type(message) == 'group' and message.text)
def learn_and_respond(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    message_text = message.text.lower() # Convert to lowercase for learning

    # Basic filter: ignore links, mentions, and commands for learning
    if "http://" in message_text or "https://" in message_text or "@" in message_text or message_text.startswith('/'):
        return

    # Add message to learning data (simplified for this example)
    if chat_id not in GROUP_LEARNING_DATA:
        GROUP_LEARNING_DATA[chat_id] = deque(maxlen=MAX_LEARNING_MEMORY)
    
    # Store the last message for potential reply learning (very basic)
    # This needs a more sophisticated approach for actual context-based replies.
    # For now, we'll store the message itself.
    GROUP_LEARNING_DATA[chat_id].append((message_text, None, False)) # (phrase, reply, is_sticker)

    # Simplified response generation:
    # In a real bot, you'd analyze the current message and find a
    # learned short reply or sticker from GROUP_LEARNING_DATA.
    # This is a complex part and would involve pattern matching,
    # frequency analysis, and potentially sentiment.

    # For this basic example, let's make it respond randomly sometimes
    # or with pre-defined short sassy replies.
    import random
    if random.random() < 0.3: # 30% chance to respond
        sassy_replies = [
            "рд╣рд╛рдБ рдпрд╛рд░!", "рд╕рд╣реА рдХрд╣рд╛! ЁЯШЙ", "рдмрд┐рд▓рдХреБрд▓!", "рдореЫреЗрджрд╛рд░!", "рдФрд░ рдмрддрд╛рдУ?",
            "рдХреНрдпрд╛ рдмрд╛рдд рд╣реИ!", "рд╣рд╛рд╣рд╛!", "рд╕рдЪ рдореЗрдВ?", "рдареАрдХ рд╣реИ!", "рд╕рд╣реА рдмрд╛рдд! ЁЯСН",
            "рдЕрд░реЗ рд╡рд╛рд╣!", "рдирд╛рдЗрд╕!", "рдХреНрдпреВрдЯ!", "рдХреНрдпрд╛ рдмреЛрд▓ рджрд┐рдпрд╛!", "рдорд╕реНрдд!",
            "рдЙрдлреНрдл!", "рд╕рдордЭ рдЧрдИ! ЁЯдФ", "рдЬреА рдЬреА!", "рдУрдХреЗ! ЁЯСМ"
        ]
        chosen_reply = random.choice(sassy_replies)
        
        # Simulate sticker usage occasionally
        if random.random() < 0.2: # 20% chance for sticker
            # In a real bot, you'd map messages to specific sticker IDs
            sticker_ids = [
                'CAACAgIAAxkBAAEX2VNmZm4a2t2192923923923923923923923923923923', # Example sticker ID, replace with actual
                'CAACAgIAAxkBAAEX2VNmZm4a2t2192923923923923923923923923923924', # Another example
                # ... add more sticker IDs that fit the sassy/cute tone
            ]
            bot.send_sticker(chat_id, random.choice(sticker_ids))
        else:
            bot.send_message(chat_id, chosen_reply)

# --- Start the bot ---
print("As ki Angel bot is starting...")
bot.polling(none_stop=True)

